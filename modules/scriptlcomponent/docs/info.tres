[gd_resource type="Resource" load_steps=2 format=2]

[ext_resource path="res://modules/doc_info/src/doc_info.gd" type="Script" id=1]

[resource]
script = ExtResource( 1 )
info = "//img:script_component/example0.png

Script Components are nodes that extend functionality of an existing node. For example, if you add a [gd]COM_PropWeapon[/gd] component to [gd]LocationProp[/gd], that allows you to create a weapon that can be picked up from the ground.

[c]Template[/c]
[gd]
# A basic script component template

tool
extends Node

class_name COM_PropThing, \\
	\"res://modules/script_component/assets/icons/generic.png\"

# List of supported node classes (currently empty)
const SUPPORTED_CLASSES = []

# List of supported script types this component can attach to
const SUPPORTED_SCRIPTS = []

# Saves weapon state during checkpoints
func on_checkpoint_save():
	Checkpoints.add_data_node(self, [])

# Restores weapon state from checkpoints
func on_checkpoint_load():
	Checkpoints.assign_node_data(self)

# Initializes the component at game runtime
func game_init():
	# Register for checkpoint saving/loading
	Checkpoints.add_on_save_and_load(self)

# Editor-specific initialization
func editor_init():
	name = \"prop_thing\"  # Set consistent node name

# Standard Godot ready function
func _ready():
	if Engine.editor_hint:
		editor_init()  # Initialize editor-specific setup

# Node initialization entry point
func node_init():
	game_init()  # Initialize game runtime setup
[/gd]

[c]Template[/c]
[gd]
# A template for usable script components

tool
extends Node

class_name COM_PropUsableThing, \\
	\"res://modules/script_component/assets/icons/generic.png\"

# List of supported node classes (currently empty)
const SUPPORTED_CLASSES = []

# List of supported script types this component can attach to
const SUPPORTED_SCRIPTS = [
	\"location_prop\",  # Location prop objects
	\"location_blockout_mesh\" # Location blockout meshes
]

# Saves weapon state during checkpoints
func on_checkpoint_save():
	Checkpoints.add_data_node(self, [])

# Restores weapon state from checkpoints
func on_checkpoint_load():
	Checkpoints.assign_node_data(self)

# Handles weapon pickup when player interacts
func on_use():
	pass

# Initializes the component at game runtime
func game_init():
	# Set up interaction listener
	var usable: = LocationDynamicObjects.get_usable(get_parent()) as Usable
	usable.connect(\"on_use\", self, \"on_use\", [], 8)
	
	# Register for checkpoint saving/loading
	Checkpoints.add_on_save_and_load(self)

# Editor-specific initialization
func editor_init():
	name = \"prop_usable_thing\"  # Set consistent node name
	
	# Configure parent properties for editor
	if get_parent() is LocationProp:
		var prop = get_parent() as LocationProp
		prop.force_static = true  # Make static in editor
		prop.use_enabled = true   # Enable interaction
	
	if get_parent() is LocationBlockoutMesh:
		var prop = get_parent() as LocationBlockoutMesh
		prop.use_enabled = true   # Enable interaction

# Standard Godot ready function
func _ready():
	if Engine.editor_hint:
		editor_init()  # Initialize editor-specific setup

# Node initialization entry point
func node_init():
	game_init()  # Initialize game runtime setup
[/gd]"
info_rus = "//img:script_component/example0.png

Script Components (Скриптовые Компоненты) - это ноды, которые расширяют функциональность существующей ноды. Например, если ты добавишь компонент [gd]COM_PropWeapon[/gd] к [gd]LocationProp[/gd], это позволит тебе создать оружие, которое можно поднять с земли.

[c]Шаблон[/c]
[gd]
# Базовый шаблон скриптового компонента

tool
extends Node

class_name COM_PropThing, \\
	\"res://modules/script_component/assets/icons/generic.png\"

# Список поддерживаемых классов нод (пока пуст)
const SUPPORTED_CLASSES = []

# Список поддерживаемых типов скриптов, к которым может прикрепляться этот компонент
const SUPPORTED_SCRIPTS = []

# Сохраняет состояние оружия во время создания чекпоинтов
func on_checkpoint_save():
	Checkpoints.add_data_node(self, [])

# Восстанавливает состояние оружия из чекпоинтов
func on_checkpoint_load():
	Checkpoints.assign_node_data(self)

# Инициализирует компонент во время выполнения игры
func game_init():
	# Регистрируем для сохранения/загрузки чекпоинтов
	Checkpoints.add_on_save_and_load(self)

# Инициализация specifically для редактора
func editor_init():
	name = \"prop_thing\"  # Устанавливаем consistent имя ноды

# Стандартная Godot функция ready
func _ready():
	if Engine.editor_hint:
		editor_init()  # Инициализируем настройки для редактора

# Точка входа для инициализации ноды
func node_init():
	game_init()  # Инициализируем настройки для времени выполнения игры
[/gd]

[c]Шаблон[/c]
[gd]
# Шаблон для используемых скриптовых компонентов

tool
extends Node

class_name COM_PropUsableThing, \\
	\"res://modules/script_component/assets/icons/generic.png\"

# Список поддерживаемых классов нод (пока пуст)
const SUPPORTED_CLASSES = []

# Список поддерживаемых типов скриптов, к которым может прикрепляться этот компонент
const SUPPORTED_SCRIPTS = [
	\"location_prop\",  # Объекты пропов локации
	\"location_blockout_mesh\" # Блокаут-меши локации
]

# Сохраняет состояние оружия во время создания чекпоинтов
func on_checkpoint_save():
	Checkpoints.add_data_node(self, [])

# Восстанавливает состояние оружия из чекпоинтов
func on_checkpoint_load():
	Checkpoints.assign_node_data(self)

# Обрабатывает поднятие оружия, когда игрок взаимодействует
func on_use():
	pass

# Инициализирует компонент во время выполнения игры
func game_init():
	# Настраиваем слушатель взаимодействий
	var usable: = LocationDynamicObjects.get_usable(get_parent()) as Usable
	usable.connect(\"on_use\", self, \"on_use\", [], 8)
	
	# Регистрируем для сохранения/загрузки чекпоинтов
	Checkpoints.add_on_save_and_load(self)

# Инициализация specifically для редактора
func editor_init():
	name = \"prop_usable_thing\"  # Устанавливаем consistent имя ноды
	
	# Настраиваем свойства родителя для редактора
	if get_parent() is LocationProp:
		var prop = get_parent() as LocationProp
		prop.force_static = true  # Делаем статичным в редакторе
		prop.use_enabled = true   # Включаем взаимодействие
	
	if get_parent() is LocationBlockoutMesh:
		var prop = get_parent() as LocationBlockoutMesh
		prop.use_enabled = true   # Включаем взаимодействие

# Стандартная Godot функция ready
func _ready():
	if Engine.editor_hint:
		editor_init()  # Инициализируем настройки для редактора

# Точка входа для инициализации ноды
func node_init():
	game_init()  # Инициализируем настройки для времени выполнения игры
[/gd]"
edit_time = 1.76123e+09
