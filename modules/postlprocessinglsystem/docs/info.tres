[gd_resource type="Resource" load_steps=2 format=2]

[ext_resource path="res://modules/doc_info/src/doc_info.gd" type="Script" id=1]

[resource]
script = ExtResource( 1 )
info = "Post-Processing System module that simplifies work with various post-processing effects making it easy to extend the set of currently existing effects.

[gd]PostProcessingSystem[/gd] itself is a glorified manager of an array of post-processing effects that are all extending [gd]PostProcessingBase[/gd] while questioning their existence in this damn codebase. Keep in mind that base-class for effects extends [gd]Resource[/gd] therefore it can be saved somewhere to illegally transport a [gd]DrugRGBPostProcessing[/gd] resource file through your country's borderline. I'm sorry if it sounds too corny at this point, but wouldn't you become a drug smuggler this way? It sounds romantic in a way. Just transporting a flash drive with this resource in there. Configured for hallucinatory pleasure. I almost fell down with my face on my own keyboard when I thought what I'd write here. What are chances of anybody finding out what I write here anyways? And why I wanna spend my last money to do what I just said about the flash drive?

If you want to make your own precious post-processing effect, think twice. If you ignored these instructions and just skipped to the next line - you are the man.

[p]res://modules/post_processing_system/assets/effects/[/p] contains all effects, that are stored in the following pattern:
[gd]
.
└── effects
	└── EFFECT_NAME_HERE
		└── effect.tres
[/gd]
Everything else doesn't really matter. You just store anything else as you wish. Please, be advised: [p]effect.tres[/p] must be your own custom-written post-processing class that extends [gd]PostProcessingBase[/gd].

[wc]Example[/wc]
I'll take one of the existing effects so you'd examine its corpse and learn from it.

[r]Store your custom effects at res://modules/post_processing_system/src/effects please I beg you.[/r]
[p]res://modules/post_processing_system/src/effects/drug_rgb.gd[/p]
[gd]
# Handles RGB split and blur effects for drug/impairment visuals
# Creates psychedelic color separation and blur effects with configurable intensity

extends PostProcessingBase

class_name DrugRGBPostProcessing

# Texture defining the RGB color separation pattern
export(CurveTexture) var curve_tex

# Noise texture for effect distortion
export(NoiseTexture) var noise_tex

# Shader material implementing the visual effect
var shader_mat: ShaderMaterial

# Whether effect is currently active (use setter to toggle)
var active = false setget set_active

# Current effect intensity (0-1)
var intensity = 0.0

# Current blur strength (0-1)
var blur_force = 0.0

# Initializes the effect system
func custom_initialize():
	# Load appropriate shader based on quality setting
	var shader_name = \"drug_rgb\"
	if Values.get_value(\"post_processing_quality\", \"high\") == \"low\":
		shader_name = \"drug_rgb_low\"
	
	# Create and configure shader material
	shader_mat = load_shader(shader_name)
	shader_mat.set_shader_param(\"curve_tex\", curve_tex)
	shader_mat.set_shader_param(\"noise0_tex\", noise_tex)

# Updates effect parameters each frame
func custom_update(delta: float):
	# Handle intensity transitions
	if active:
		# Smooth fade in for main effect
		intensity = lerp(intensity, 1.0, 1.0 * delta)
		# Slower fade in for blur (creates staggered effect)
		blur_force = lerp(blur_force, 1.0, 0.1 * delta)
	else:
		# Smooth fade out for main effect
		intensity = lerp(intensity, 0.0, 0.3 * delta)
		# Faster fade out for blur
		blur_force = lerp(blur_force, 0.0, 0.2 * delta)
	
	# Update shader parameters
	shader_mat.set_shader_param(\"intensity\", intensity)
	shader_mat.set_shader_param(\"blur_force\", blur_force)
	
	# Enable/disable effect based on intensity threshold
	if intensity <= 0.005 and is_enabled:
		disable()
	elif intensity >= 0.005 and not is_enabled:
		enable()

# Setter for active property - controls whether effect is enabled
func set_active(value: bool):
	active = value
[/gd]

//img:post_processing_system/example0.png
//img:post_processing_system/example1.png

Basically you write your class like [gd]DrugRGBPostProcessing[/gd] that does nothing but the utmost basic control of shader parameters. Shader... Just a shader doing the shit you desire. Resource just serves as a way to configure all the shit. The shit's done. You see the patterns, right? Good. And if you don't, get the hell out of here and go smug that flash drive with a [gd]DrugRGBPostProcessing[/gd] resource on it and make the borderline officers question your sanity.

Have fun."
info_rus = "Модуль системы пост-обработки, который упрощает работу с различными эффектами пост-обработки, позволяя легко расширять набор существующих эффектов.

Сам по себе [gd]PostProcessingSystem[/gd] - это просто продвинутый менеджер массива эффектов пост-обработки, которые все наследуются от [gd]PostProcessingBase[/gd], при этом questioning их существование в этой чёртовой кодовой базе. Имей в виду, что базовый класс для эффектов наследуется от [gd]Resource[/gd], поэтому его можно куда-нибудь сохранить, чтобы незаконно провезти файл ресурса [gd]DrugRGBPostProcessing[/gd] через границу твоей страны. Извини, если это звучит слишком банально на данный момент, но разве ты не стал бы контрабандистом наркотиков таким образом? Это звучит романтично в некотором смысле. Просто перевози флешку с этим ресурсом внутри. Настроенную для галлюциногенного удовольствия. Я чуть не упал лицом на свою клавиатуру, когда подумал, что я здесь напишу. Каковы шансы, что кто-нибудь вообще узнает, что я здесь пишу? И почему я хочу потратить свои последние деньги, чтобы сделать то, что я только что сказал про флешку?

Если ты хочешь создать свой собственный драгоценный эффект пост-обработки, подумай дважды. Если ты проигнорировал эти инструкции и просто перешёл к следующей строке - ты мужик.

[p]res://modules/post_processing_system/assets/effects/[/p] содержит все эффекты, которые хранятся по следующему шаблону:
[gd]
.
└── effects
	└── ИМЯ_ЭФФЕКТА_ЗДЕСЬ
		└── effect.tres
[/gd]
Всё остальное не имеет особого значения. Ты просто хранишь всё остальное как пожелаешь. Пожалуйста, прими к сведению: [p]effect.tres[/p] должен быть твоим собственным классом пост-обработки, написанным вручную, который наследуется от [gd]PostProcessingBase[/gd].

[wc]Пример[/wc]
Я возьму один из существующих эффектов, чтобы ты мог изучить его труп и научиться на нём.

[r]Пожалуйста, храни свои кастомные эффекты в res://modules/post_processing_system/src/effects, я умоляю тебя.[/r]
[p]res://modules/post_processing_system/src/effects/drug_rgb.gd[/p]
[gd]
# Обрабатывает RGB-разделение и эффекты размытия для наркотических/нарушающих зрение визуалами
# Создает психоделическое разделение цветов и эффекты размытия с настраиваемой интенсивностью

extends PostProcessingBase

class_name DrugRGBPostProcessing

# Текстура кривой, определяющая шаблон разделения цветов RGB
export(CurveTexture) var curve_tex

# Шумовая текстура для искажения эффекта
export(NoiseTexture) var noise_tex

# Шейдерный материал, реализующий визуальный эффект
var shader_mat: ShaderMaterial

# Активен ли эффект в данный момент (используй сеттер для переключения)
var active = false setget set_active

# Текущая интенсивность эффекта (0-1)
var intensity = 0.0

# Текущая сила размытия (0-1)
var blur_force = 0.0

# Инициализирует систему эффектов
func custom_initialize():
	# Загружаем соответствующий шейдер в зависимости от настройки качества
	var shader_name = \"drug_rgb\"
	if Values.get_value(\"post_processing_quality\", \"high\") == \"low\":
		shader_name = \"drug_rgb_low\"
	
	# Создаём и настраиваем шейдерный материал
	shader_mat = load_shader(shader_name)
	shader_mat.set_shader_param(\"curve_tex\", curve_tex)
	shader_mat.set_shader_param(\"noise0_tex\", noise_tex)

# Обновляет параметры эффекта каждый кадр
func custom_update(delta: float):
	# Обрабатываем переходы интенсивности
	if active:
		# Плавное появление основного эффекта
		intensity = lerp(intensity, 1.0, 1.0 * delta)
		# Медленное появление размытия (создает ступенчатый эффект)
		blur_force = lerp(blur_force, 1.0, 0.1 * delta)
	else:
		# Плавное затухание основного эффекта
		intensity = lerp(intensity, 0.0, 0.3 * delta)
		# Более быстрое затухание размытия
		blur_force = lerp(blur_force, 0.0, 0.2 * delta)
	
	# Обновляем параметры шейдера
	shader_mat.set_shader_param(\"intensity\", intensity)
	shader_mat.set_shader_param(\"blur_force\", blur_force)
	
	# Включаем/выключаем эффект на основе порога интенсивности
	if intensity <= 0.005 and is_enabled:
		disable()
	elif intensity >= 0.005 and not is_enabled:
		enable()

# Сеттер для свойства active - управляет включением эффекта
func set_active(value: bool):
	active = value
[/gd]

//img:post_processing_system/example0.png
//img:post_processing_system/example1.png

По сути, ты пишешь свой класс вроде [gd]DrugRGBPostProcessing[/gd], который не делает ничего, кроме самого базового контроля параметров шейдера. Шейдер... Просто шейдер, делающий то дерьмо, которое ты хочешь. Ресурс просто служит способом настройки всего этого дерьма. Дерьмо сделано. Ты видишь шаблоны, верно? Хорошо. А если нет - убирайся к чёрту отсюда и иди пронеси ту флешку с ресурсом [gd]DrugRGBPostProcessing[/gd] через границу, чтобы пограничники усомнились в твоём психическом здоровье.

Веселись."
edit_time = 1.76123e+09
