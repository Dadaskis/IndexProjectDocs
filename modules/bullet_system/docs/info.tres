[gd_resource type="Resource" load_steps=2 format=2]

[ext_resource path="res://modules/doc_info/src/doc_info.gd" type="Script" id=1]

[resource]
script = ExtResource( 1 )
info = "//img:bullet_system/example0.jpg
*Player weapon example, but it is used for NPCs, sentry guns, as well as anything shooting anything

Bullet system module that contains a base class, a bullet data class, a bullet trail scene, and other stuff. If you want to make a new \"bullet system\", you just make a new class that extends [gd]BulletSystem[/gd]. If you want to use a bullet system - never use any directly, like [gd]RaycastBulletSystem[/gd]. This system was made for easier replacement of bullet system in cases where it might be needed. You just use [gd]BulletSystem[/gd]'s API that consists of two simple methods: [gd]update[/gd] and [gd]shoot_bullet[/gd]. If you want to configure an impact/behavior of your bullet, you might as well need to do so in [gd]BulletData[/gd] resource.

Usage example
[gd]
# Running this logic in some random Node

# Creating a bullet data resource
var bullet_data: = BulletData.new()
bullet_data.min_damage = 10
bullet_data.max_damage = 100
bullet_data.min_armor_damage = 100
bullet_data.max_armor_damage = 200
bullet_data.bullet_force = 2.0
bullet_data.max_distance = 1000.0
bullet_data.spread = 0.1

# It can also be just loaded, since it can be saved as a resource file
var different_bullet_data = load(\"res://path/to/bullet_data.res\")

# Creating and shooting
var bullet_system: BulletSystem
bullet_system = RaycastBulletSystem.new() # Using raycasts for this example
bullet_system.initialize(get_world().direct_space_state, self)
bullet_system.shoot_bullet(global_position, Vector3.FORWARD, bullet_data)

# Using the loaded bullet data instead
bullet_system.shoot_bullet(global_position, Vector3.UP, different_bullet_data)
[/gd]"
info_rus = "//img:bullet_system/example0.jpg
*Пример оружия игрока, но также используется для NPC, турелей и всего, что стреляет

Модуль системы пуль, содержащий базовый класс, класс данных пули, сцену следа пули и другое. Если ты хочешь создать новую \"систему пуль\", просто создай новый класс, расширяющий [gd]BulletSystem[/gd]. Если ты хочешь использовать систему пуль - никогда не используй конкретные реализации напрямую, вроде [gd]RaycastBulletSystem[/gd]. Эта система была создана для простой замены системы пуль в случаях, когда это может потребоваться. Ты просто используешь API [gd]BulletSystem[/gd], состоящее из двух простых методов: [gd]update[/gd] и [gd]shoot_bullet[/gd]. Если ты хочешь настроить воздействие/поведение своей пули, тебе также может понадобиться сделать это в ресурсе [gd]BulletData[/gd].

Пример использования
[gd]
# Запуск этой логики в каком-нибудь Node

# Создание ресурса данных пули
var bullet_data: = BulletData.new()
bullet_data.min_damage = 10
bullet_data.max_damage = 100
bullet_data.min_armor_damage = 100
bullet_data.max_armor_damage = 200
bullet_data.bullet_force = 2.0
bullet_data.max_distance = 1000.0
bullet_data.spread = 0.1

# Его также можно просто загрузить, так как он может быть сохранён как файл ресурса
var different_bullet_data = load(\"res://path/to/bullet_data.res\")

# Создание и выстрел
var bullet_system: BulletSystem
bullet_system = RaycastBulletSystem.new() # Используем рейкасты для этого примера
bullet_system.initialize(get_world().direct_space_state, self)
bullet_system.shoot_bullet(global_position, Vector3.FORWARD, bullet_data)

# Использование загруженных данных пули вместо созданных
bullet_system.shoot_bullet(global_position, Vector3.UP, different_bullet_data)
[/gd]"
edit_time = 1.76112e+09
