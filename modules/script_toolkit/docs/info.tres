[gd_resource type="Resource" load_steps=2 format=2]

[ext_resource path="res://modules/doc_info/src/doc_info.gd" type="Script" id=1]

[resource]
script = ExtResource( 1 )
info = "So, very very long ago, there were only logic scripts and I had to code the gameplay for each location individually. Sounds nice.... until logic scripts hit thousands of lines of spaghetti. That's why [p]Script Toolkit[/p] exists. Those are nodes that contain reusable pieces of gameplay logic that can be easily made and supported.

[c]Template[/c]
[gd]
# A template for basic ST.

extends Node

class_name ST_BasicExample, \\
	\"res://modules/script_toolkit/assets/icons/generic.png\"

# Supported node classes (ALL means works with any node)
const SUPPORTED_CLASSES = [
	\"ALL\"
]

# Supported script types (empty means no restrictions)
const SUPPORTED_SCRIPTS = []

# Unique variables that should persist per location instance
const LOC_UNIQUE_VARS = [
	\"start_event_name\",
]

# Event name that triggers the location change
export(String) var start_event_name

# Handles incoming location events and triggers location changes
# loc_event_name: Name of the triggered event
# args: Additional event arguments (unused in this case)
func on_location_event(loc_event_name, args):
	# Check if the event matches our configured trigger event
	if loc_event_name == start_event_name:
		pass

# Initializes the node by connecting to the location event system
func node_init():
	# Connect to the global location event bus
	LocationEvents.connect(
		\"on_location_event\", 
		self, 
		\"on_location_event\"
	)
[/gd]"
info_rus = "Итак, очень-очень давно были только логические скрипты, и мне приходилось программировать геймплей для каждой локации в отдельности. Звучит здорово... пока логические скрипты не достигли тысяч строк спагетти-кода. Именно поэтому существует [p]Script Toolkit[/p]. Это ноды, которые содержат переиспользуемые куски геймплейной логики, которые можно легко создавать и поддерживать.

[c]Шаблон[/c]
[gd]
# Шаблон для базового ST (Script Toolkit)

extends Node

class_name ST_BasicExample, \\
	\"res://modules/script_toolkit/assets/icons/generic.png\"

# Поддерживаемые классы нод (ALL означает - работает с любой нодой)
const SUPPORTED_CLASSES = [
	\"ALL\"
]

# Поддерживаемые типы скриптов (пусто означает - без ограничений)
const SUPPORTED_SCRIPTS = []

# Уникальные переменные, которые должны сохраняться для каждого экземпляра локации
const LOC_UNIQUE_VARS = [
	\"start_event_name\",
]

# Имя события, которое запускает смену локации
export(String) var start_event_name

# Обрабатывает входящие события локации и запускает смену локаций
# loc_event_name: Имя вызванного события
# args: Дополнительные аргументы события (не используются в данном случае)
func on_location_event(loc_event_name, args):
	# Проверяем, совпадает ли событие с настроенным событием-триггером
	if loc_event_name == start_event_name:
		pass

# Инициализирует ноду, подключаясь к системе событий локации
func node_init():
	# Подключаемся к глобальной шине событий локации
	LocationEvents.connect(
		\"on_location_event\", 
		self, 
		\"on_location_event\"
	)
[/gd]"
edit_time = 1.76123e+09
