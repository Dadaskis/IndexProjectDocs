[gd_resource type="Resource" load_steps=2 format=2]

[ext_resource path="res://modules/doc_info/src/doc_info.gd" type="Script" id=1]

[resource]
script = ExtResource( 1 )
info = "//img:character_builder/example0.jpg
[t]What's the purpose?[/t]
Character Builder provides a solid workflow to make characters of any complexity. In fact, it works like constructor of humanoid characters. If you ever played GTA, you probably were using their dressing system at least once to change apperance of your character. In this case, Character Builder is quite similar. However, in this case, it is usable for making of character models, that later can be used for NPCs or comic scenes. In this case...
- Character Builder is providing \"character parts\" to add parts that have influence of multiple bones. These can be rather complex clothes or equipment.
- \"Character details\" are objects that are attached to a bone (100% bone weight influence on all vertices), in this case, it can be ammo rig pouches, radios, goggles, minor reusable details.
- Solid preview of a moving character to show how vertex weights are working.
- Possibility to save and return later.
- All assets can be loaded in real-time, you don't have to wait for Godot to import models or textures.
- Subtextures support and material editing for even more visual control.
- Export of GLTFs with minimal amount of materials by creation of combined, optimized texture atlas.
- Due to more modular workflow, work can be split between multiple artists working on different parts/details.
- And probably a bit more.

[c]How was it made before? What was the reason to create the Character Builder?[/c]
//img:character_builder/old0.jpg
The workflow was like that:
- Create a high-poly model of clothes to combine in one mesh afterwards.
- Making a quick, dirty low-poly with Instant Meshes.
- UV unwrapping, baking, texturing, quick rigging, tada.
...
In 8 hours i could make one character! Or, not really 8 hours, sometimes more if you had to make quadruple NVGs for example. This workflow was *blazingly fast*, really. However, it was suffering from issues that were rather offputting for me as a developer:
- Each character would require at least 8 hours of work, of course, it could be less... but it would come at cost.
- There's no possibility to reuse *any* parts of already existing characters.
- Higher level of detail usually meant going through several circles of hell. Would you like to take a hellish ride?
- Hard surface modelling (forementioned NVGs) is rather complex.
- It is nearly impossible to go back and change *one little thing* in a model.
- And so on, if you have certain experience in modelling, you might mention *even more* of these points.

[c]Purpose[/c]
//img:character_builder/new0.jpg
So that being said, Character Builder is [c]the must[/c] when it comes to creation of any characters in this game from now on. Even if alternative ways are still available, it is [c]highly advised[/c] to use this tool instead. It saves a lot of pain when it comes to arrangement of clothes, reusing of parts, and, surely, the most important point here is that it optimizes both worktime and runtime performance of resulting characters.

To use this tool, simply change to location called [c]character_builder[/c], simple as that. Keep in mind: This location [r]WILL NOT work at exported game[/r] since it is relying on GLTF exporting tools that are [c]only available in editor builds.[/c]

[t]Technical side[/t]

Firstly, you need to know that the entire editor is practically made in a single scene: [c]res://modules/character_builder/assets/editor_scenes/character_builder.tscn[/c]. Of course, it is using a set of subscenes for more complex parts like camera controller, character, UI and gizmos.

[c]Scene Structure[/c]
//img:character_builder/scene_structure0.jpg
[c]world_env[/c] and [c]env[/c] - these two simply setup an environment to see in the background
[c]cam_rotation[/c] -  camera controller, simple controls assigned to Right Mouse Button
[c]character[/c] - the character themselves, represents a complex model with all character meshes of parts/details on it, it also contains the exporting logic in the code of this node
[c]ui_layer/editor_UI[/c] - this editor's entire UI, a pretty complex subscene with all kinds of [c]Control[/c]-derived nodes
[c]position[/c] and [c]rotation[/c] - gizmos used by the system to move the objects around (mainly used for details)
[c]screenshot_viewport[/c] - just a viewport that makes screenshots for character save files

[c]File Structure[/c]
//img:character_builder/file_structure0.jpg
[c]res://modules/character_builder/assets/char_base/[/c] - contains a humanoid character placeholder
[c]res://modules/character_builder/assets/editor_scenes/[/c] - a set of folders related to the main editor scene (including the scene itself)
[c]res://modules/character_builder/assets/editor_scenes/character/[/c] - scenes related to the character model, in this case, the character scene as well as the material exporting scene
[c]res://modules/character_builder/assets/editor_scenes/editor/[/c] - generic editor stuff like camera controller, this folder contains [c]camera.tscn[/c] that works like first-person noclip view, however it was made in the first version of this tool and was removed due to uncomfortable use in this scenario
[c]res://modules/character_builder/assets/editor_scenes/editor_UI/[/c] - contains the editor UI scene as well as folder that contains variety of complex UI elements used by this editor UI, this folder also contains a theme resource file
[c]res://modules/character_builder/assets/editor_scenes/editor_UI/parts/[/c] - complex editor UI parts, which are related to variety of lists, selectors and, the most important part - material combiner window
[c]res://modules/character_builder/assets/textures/[/c] - some textures, used mainly by UI

This module also contains [c]hidden folders[/c] that will be covered in different section of this documentation.

[c]Code structure and principles[/c]

Unlike some other similar modules like [c]comics_renderer[/c], this module is trying to utilize principle \"call down, signal up\" as much as possible to avoid mess in the code. Sadly it results in an insane amount of boilerplate code, but overall, organization is more or less clear. Even if i wish to tell about every script in detail, they have their very own documentation pages. Here i would like to point out the ones that are quite essential for this module, so it would be easier for you to start orienting yourself here.

[c]res://modules/character_builder/src/character_builder.gd[/c] - this is the primary script in this system, it works like a duct tape for character model and UI. It is connecting to all signals of these two and makes them communicate with each other though signal calls. If character model have changed the list of parts, editor UI will be updated accordingly. If material combiner menu have got some changes, character will get information about that from this primary script that'll get that info from a signal. Call down, signal up, that's the purpose of this entire script. Surely, it went beyond that when it comes to the following points:
- Input management
- UI / Camera Controller synchronization (do not accept inputs if cursor in UI)
- Object selection logic (mainly used for \"character details\")
- Saving/Loading logic handling
All of this logic helps to make this tool usable for the end-user; Makes them happy, you know, satisfied with this life, extra dopamine in their mind, makes them forget all the trouble they have experienced in this life, you know what i mean.

[c]res://modules/character_builder/src/editor_UI/editor_UI.gd[/c] - this is the editor UI's code and, yeah, there's not much to see here, it is basically a fully-fledged \"call down, signal up\" script that connects all the pieces together while providing a list of signals usable by the <code>character_builder.gd</code>

[c]res://modules/character_builder/src/character/character.gd[/c] - in a way, some kind of heart in this entire system. This is the code that works with the character model, which is about:
- Organizing/Processing character parts and details
- Exporting into GLTF with combined texture sets
- Working with saving/loading
Even though this script works with exporting, keep in mind: Material combiner window is the thing that makes exporting possible, only with proper configuration [c]character.gd[/c] can function as exporter.

[c]res://modules/character_builder/src/character/material_export.gd[/c] - all texture sets are rendered in a separate [c]Viewport[/c] to be combined later in [c]character.gd[/c]. This one is important because materials might have different configurations and [c]material_export.gd[/c] is forcing all materials to be saved in a PBR set that consists of \"Diffuse\", \"Normal\" and \"MRS\" maps. Keep in mind, all \"texture set combining\" logic is placed in [c]character.gd[/c], not here.

[c]res://modules/character_builder/src/editor_UI/parts/material_combiner.gd[/c] - code for the material combining UI. This one is important to mention, because that's the source of all info regarding the texture sets combination; It is exporting data that is later used [c]character.gd[/c]

[c]res://modules/character_builder/src/autoload/character_builder_utilities.gd[/c] - an auto-load that is also known [c]CharacterBuilderUtilities[/c], this singleton exists to cover the essential needs of model processing in this module that is required by character parts/details as well as certain UI elements

For more details regarding other scripts in this module, please, read documentation of these scripts or take a look at their source code.

[c]Hidden Folders[/c]
//img:character_builder/hidden_folders0.jpg
[c]res://modules/character_builder/assets/[/c] contains a set of hidden folders. Godot ignores all folders that are starting with a point, like [c].game_export[/c] in particular. In this case, Godot won't import any of the files in there and they won't be visible in [c]FileSystem[/c]. Besides ignoring the importing step of this engine, there's one more reason of choosing such a design decision: This project contains a lot of files that are slowing down the work of [c]FileSystem[/c], resulting in much slower detection of importable files, slower saving times and etc. More than that, this system is relying on runtime loading of resources by using [gd]CharacterBuilderUtilities.load_image_texture[/gd] and [gd]PackedSceneGLTF.import_gltf_scene[/gd] as a way to skip the torturing part of importing Godot assets. It also allows to not close the application if you have imported a new part, you can simply reload the assets and it'll allow you to keep working on your character.

List of hidden folders:
[c].char_detail_sources[/c] - contains source files related to character details, which includes Blender files as well as baked maps
[c].char_details[/c] - exported files of all character details that are loaded by the system to operate with
[c].char_parts[/c] - exported files of all character parts
[c].char_parts_sources[/c] - source files of character parts (like [c].char_detail_sources[/c])
[c].GLTF_exports[/c] - all exported characters, they always end up here on export, even if you disable exporting to [c]human_model[/c] module
[c].saved_characters[/c] - save files of all characters

Potential usecase of these hidden folders is covered in section [c]How can you import your own assets? / Hidden Folders Organization[/c] of this documentation page. Scroll down, you'll find it there.

[t]How to use?[/t]

[c]Start[/c]
To start using Character Builder, you can switch to location called [c]character_builder[/c] by entering a console command: [c]change_location character_builder[/c]. Or, alternatively, you can simply use dev-menu. Either way, once you switch to this location, you will see a default setup.
//img:character_builder/use0.jpg

[c]Name change[/c]
Once you start working on a new character, you mind need to consider to change the name of your character. You can do that by pressing \"Edit\" button on the top panel and entering a name of your character. After you press \"Apply\", this will change the name of your character.
//img:character_builder/use1.jpg

[c]Saving[/c]
By pressing save, you will save a character with this name. If there are existing save files with the same name - they will be automatically overriden, so be cautious.
//img:character_builder/use2.jpg

[c]Loading[/c]
You can also load all existing characters by pressing \"Load\" button, in menu you will be able to see the names of the existing characters as well as their previews for easier understanding of what kind of character it is.
//img:character_builder/use3.jpg

[c]Character Parts[/c]
When you make a new character, you might need to consider to add your first character part. You can do that by pressing \"Add a character part\" button on the left.
//img:character_builder/use4.jpg
After pressing this button, you will see a menu of all available character parts. You can add any character parts without any limitations if it fits your artistic view. Once you add a character part, the selection window will NOT close allowing you to add multiple parts.
//img:character_builder/use5.jpg
If you want to edit properties of your new part, you can press [o] button in the parts list on the left.
//img:character_builder/use6.jpg
This will give you access to transform parameters as well as to material editing. By pressing on material edit button, you will see the list of properties in the \"Material Editor\" window, where you can switch textures of your part or tweak the material parameters according to your taste or needs. If you don't need this part anymore, you can simply press \"Remove\" in the property window.
//img:character_builder/use7.jpg

[c]Character Details[/c]
If you are done working with character parts of any sorts, you might wish to work with the details of this character. You can do that by adding them with \"Add a character detail\" button. Process is *very* similar to character parts, except there's one sufficient difference that makes character details a unique tool in the hands of artist. Unlike character parts, you can select details by simply clicking on them in Character Builder viewport. This will give you possibility to use gizmos to position and rotate these details. This way, you can add ammo pouches to your ammo rig. Keep in mind, details are attached to a specific bone (unlike parts that have multiple influences). When you select a detail, you can specify a bone group and, as it follows: A bone to attach this detail to. You can use \"Toggle Idle Pose Animation\" button to play a test animation to find out how your details are moving with the character.
//img:character_builder/use8.jpg

[c]Exporting[/c]
Once you are done with creation of your character, you might want to export this character to import into this game as a \"Human Model\". However, you need to understand that this process consists of several steps. The most important ones are \"Material Combining Configuration\" and \"BlenderFastTools Integration\"

[c]Exporting - Material Combining Configuration[/c]
If you will try to export the character model straight away without configuration, you will get an error that says: [c]Export error: Please, configure material combining without errors.[/c]
//img:character_builder/use9.jpg
In this case, you need to press a button called \"Material Config\", it is located on the left.
//img:character_builder/use10.jpg
Once you press this button, you will see a highly-specialized nanotechnology non-AI fucking masterpiece window to place down simple quad shapes to turn them into a single combined bombastic optimized high-quality texture set.
//img:character_builder/use11.jpg
Oh yeah, i was so bored to write this thing at this point that i couldn't refuse to add some marketing buzzwords that would keep you engaged... Anyway, what i was saying is that you will open this window, it will contain a list of materials on the left.
//img:character_builder/use12.jpg
All of these materials have a checkbox, once you press a checkbox - this material will appear in the texture field.
//img:character_builder/use13.jpg
Even if you can place down one texture on top of another, keep in mind - UVs will be placed accordingly. So you should place them down to their unique spots without any overlaps. If you will have any overlaps, you will see a warning on the left. Overlaps won't stop you from exporting a model.
//img:character_builder/use14.jpg
You can tweak the size of individual material on the left by changing \"x1.0\" value to something else.
//img:character_builder/use15.jpg
And, if you are done with placement of your materials, you can also change \"Tex. Size Limit\" to change the size of the resulting texture in case if the default value can be too low for your needs. You can set the size limit to a maximum value and the system will use only the needed texture resolution instead.
//img:character_builder/use16.jpg
Once you are done with everything, you can press \"Export GLTF\" and it will export your model. Be aware that \"Export Human Tex\" checkbox exports your textures to a human model's folder that is placed at [gd]\"res://modules/human_model/assets/models/[CHARACTER_NAME_HERE]\"[/gd].
//img:character_builder/use17.jpg

[c]Exporting - BlenderFastTools Integration[/c]
Open a version of Blender that has a full support of the \"BlenderFastTools\" plugin. At this moment, 2.83 or 4.x are the only compatible version. Go to \"Scene Properties\" window, scroll down to the bottom of \"BlenderFastTools\" section.
//img:character_builder/use18.jpg
//img:character_builder/use19.jpg
You will see a category called \"Import Character\" that have a lot of warnings written in an extremely radical polite English.
//img:character_builder/use20.jpg
Press \"Update character list\" button and then select a character you want to import in \"Character Builder import\" panel.
//img:character_builder/use21.jpg
After pressing \"Import Character\", you will import the character made in Character Builder.
//img:character_builder/use22.jpg
Imported character are split into parts and details. You can either connect everything together by pressing \"A\" and then \"Ctrl + J\", or you can tweak certain parts in edit mode to make them fit better.
//img:character_builder/use23.jpg
After connecting everything together, you need to rename the only mesh object to \"character\".
//img:character_builder/use24.jpg
After this, you will get access to \"Human Model\" category (it is higher up there in the section) where you can find a button called \"Export character\".
//img:character_builder/use25.jpg
Before you press this button, make sure you have saved your .blend file with an appropriate name of the character you want to export. It is highly advised to store all human character models at [gd]\"res://.dev_sources/human_models/\"[/gd]. Once you've saved your file, you can press \"Export character\" model, that will automatically export appropriate GLTF file into [gd]\"res://modules/human_model/assets/models/[CHARACTER_NAME_HERE]\"[/gd].
//img:character_builder/use26.jpg
[c]Final Configuration[/c]
Make sure to visit this folder in Godot to import the models and configure the materials by assigning them correct values and textures in all slots.
//img:character_builder/use27.jpg
By default, Godot is importing [gd]SpatialMaterial[/gd] materials instead of [gd]UserSpatialUbershader[/gd] that are used for all materials in this game. Firstly - you need to replace [gd]SpatialMaterial[/gd] with [gd]UserSpatialUbershader[/gd]. You can just remove the file, create a new resource (with the same name, mind you) and then it's gonna be great. However, it might be too slow, so i would like to show some easier method. Firstly, copy the folder path...
//img:character_builder/use28.jpg
Then, open [c]OtherKit[/c] menu...
//img:character_builder/use29.jpg
Click here a couple of times...
//img:character_builder/use30.jpg
Find \"Material Replace\" tab, enter the folder path, click \"Replace\"
//img:character_builder/use31.jpg
While it might seem to be harder to do than doing it the plain-old way, i found it to be faster personally because \"Create a new resource\" window is working slowly in this project, plus i'm too lazy to save the resource properly, while this tool helps to detect any [gd]SpatialMaterial[/gd] and replace them accordingly. However, back to configuration. When you get your hands on a new [gd]UserSpatialUbershader[/gd], you need to enable effects... Also, make sure to change [c]Diffuse Mode[/c] to [gd]\"Burley\"[/gd] and [c]Specular Mode[/c] to [gd]\"Schlick GGX\"[/gd]...
//img:character_builder/use32.jpg
//img:character_builder/use33.jpg
For the most characters you will need [c]Albedo[/c], [c]Normal Map[/c], [c]MRS[/c] effects. Sometimes - [c]Emission[/c]. All of these effects would be more than sufficient to make somewhat decent characters of any complexity. After you are done enabling effects, press [c]Force Update[/c] to update shader in this material to fit the requirements of renderer.
//img:character_builder/use34.jpg
After you've updated the material, you can assign textures to slots. Keep in mind - initially your material will be fully black, so do not forget to change [c]Albedo Color[/c] to be white. More than that, [c]Normal Map Power[/c] equals to [c]0.0[/c] by default, make sure to change value to [c]1.0[/c] so normal map would take full effect on lighting of this material. After all this - mr. Shitass0 should be looking fresh and clean.
//img:character_builder/use35.jpg

[c]Using your fancy new character on NPC[/c]
Alright, it is going a little bit offtopic here, since it goes out of scope of this module in its entirety... But let's be honest, you'd be more than happy to see your fancy new character on certain NPC in this game, right? So let's do this. [gd]\"res://modules/non_playable_character/assets/characters/\"[/gd] contains all NPC character configs of this game, so you can locate a class of your choice. Let's edit [c]agent[/c]...
//img:character_builder/use36.jpg
And then you just edit a model name over here, in this array...
//img:character_builder/use37.jpg

[t]How can you import your own assets? / Hidden Folders Organization[/t]
Once you got yourself on your feet and made a character of your dreams, you, most likely, will wonder how to add custom assets in this tool. It is pretty easy, however you need to be aware of the rules in this system. Firstly, you may learn faster if you examine already existing source files placed in folders [p]modules/character_builder/assets/.char_parts_sources/[/p] and [p]modules/character_builder/assets/.char_detail_sources/[/p], as well as already exported [p]modules/character_builder/assets/.char_parts/[/p] and [p]modules/character_builder/assets/.char_details/[/p]. By examining these files, you have a good chance to see patterns all over the place and go through some kind of trip. Either way, i'm writing this guide so... I guess i would still need to explain it briefly.
//img:character_builder/import0.jpg

[c]Character Parts Geometry[/c]
To make a proper piece of geometry for your character part, you need to get a proper \"armature\" in Blender first. [p]human_rig[/p] is a skeleton that is used by all human models and character parts. You can't create one yourself, you need to get it from somewhere else. You can easily get a skeleton by pressing \"Import Human Armature\" or by importing a character you'd wish to develop.
//img:character_builder/import1.jpg
Once you got the armature (preferrably with some kind of humanoid character geometry), you can create your character part. It's usually as easy as creating a geometry on top of the human base mesh. I would surely describe you a detailed guide on how to make models here, but i would rather assume you've got years of experience behind your back and you know how to make that stuff yourself.
//img:character_builder/import2.jpg
Once you are done with your model, make sure to name your mesh object [p]char_part[/p], this way BlenderFastTools will detect it as exportable character part mesh. Before exporting, please, make sure you've got proper vertex weights (mesh is parented to armature and is deformed by it) and that the material's name is something you'd be able to operate with (and is unique enough to not cause any conflicts with other parts/details). It is highly recommended to call your materials just like you call your character part. If you make \"armor0_m\", then call your material \"armor0_m\", if there's multiple materials - just add a number in the end.
//img:character_builder/import3.jpg
After checking everything: Press [gd]\"Export character part\"[/gd] in \"Character Builder\" panel. This will export GLTF of your character part.
//img:character_builder/import4.jpg
However, you need to prepare textures. All of the exported textures must follow the following pattern:
[gd]
\"[matname]_D.tga\" # Diffuse / Color map
\"[matname]_N.tga\" # Normal map
\"[matname]_MRS.tga\" # Metal-Roughness-Specular packed map
\"[matname]_E.tga\" # Emission map
[/gd]
Keep your names consistent, if your material is called \"armor0_m\", then your image file name is going to be [gd]\"armor0_m_D.tga\"[/gd]. You save your textures in the folder of exported character part. To locate your exported character part, go to [gd]\"modules/character_builder/assets/.char_parts/\"[/gd] and find a folder with the name of your character part. Once you export all the textures in there, it should be fine, you can go to Character Builder, update assets and add your character part.
//img:character_builder/import5.jpg
Keep in mind, if something went wrong - do not close Character Builder, you can simply fix up the files, re-export stuff and then update assets in Character Builder.
//img:character_builder/import6.jpg

[c]Character Details Geometry[/c]
It really is similar to exporting of character parts, except character details don't have to be parented to any armature to be exported, they can have any kind of origin and etc. In fact, they are just objects, like location props, except made for a character model. All principles related to textures and exporting apply here too, except you are just using [gd]\"Export character detail\"[/gd]. That's really all you need to know. For more information, please, reread.
//img:character_builder/import7.jpg

[c]Subtextures[/c]
They work a lot like the textures mention up there, the \"main/default\" textures used for a part/detail. However, any part/detail can get a secondary set of these textures, and the amount of these sets can be indefinite. To make your own subtexture, please, create/locate [gd]\"subtextures\"[/gd] folder inside the directory of your part/detail. Then, inside, you create a folder with a following naming convention: [gd]\"[mat_name]__[subtex_name]\"[/gd]. For example: [gd]\"armor0_m__osec\"[/gd]. In this case, keep in mind, double underscore symbol marks a separation between a material name and a sub-texture-set name. Keep in mind, this system was designed even for these models that might have multiple materials, so including the material name first is always required for a proper functioning of this system. As an example you can examine the following directory: [gd]\"modules/character_builder/assets/.char_parts/6b93_helmet_28x/subtextures/6b93_helmet__black/\"[/gd].
//img:character_builder/import8.jpg
</p>"
info_rus = "//img:character_builder/example0.jpg
[t]Какова цель?[/t]
Character Builder предоставляет надёжный рабочий процесс для создания персонажей любой сложности. По сути, он работает как конструктор гуманоидных персонажей. Если ты когда-либо играл в GTA, ты probably использовал их систему одежды хотя бы раз, чтобы изменить внешний вид своего персонажа. В этом случае Character Builder довольно похож. Однако здесь он пригоден для создания моделей персонажей, которые later могут быть использованы для NPC или комиксных сцен. В данном случае...
- Character Builder предоставляет \"части персонажа\" для добавления элементов, влияющих на несколько костей. Это может быть довольно сложная одежда или снаряжение.
- \"Детали персонажа\" - это объекты, прикреплённые к кости (100% влияние веса кости на все вершины), например, подсумки для магазинов, рации, очки, мелкие переиспользуемые детали.
- Реалистичный превью движущегося персонажа, чтобы показать, как работают веса вершин.
- Возможность сохраниться и вернуться позже.
- Все ассеты могут загружаться в реальном времени, тебе не нужно ждать, пока Godot импортирует модели или текстуры.
- Поддержка субтекстур и редактирования материалов для ещё большего визуального контроля.
- Экспорт GLTF с минимальным количеством материалов за счёт создания комбинированного, оптимизированного текстурного атласа.
- Благодаря более модульному рабочему процессу, работа может быть разделена между несколькими художниками, работающими над разными частями/деталями.
- И, возможно, немного больше.

[c]Как это делалось раньше? Какова была причина создания Character Builder?[/c]
//img:character_builder/old0.jpg
Рабочий процесс был таким:
- Создать высокополигональную модель одежды, чтобы потом объединить в один меш.
- Быстрое, грязное создание низкополигональной модели с помощью Instant Meshes.
- UV развёртка, запекание, текстурирование, быстрый риггинг, та-да.
...
За 8 часов я мог сделать одного персонажа! Ну, не совсем 8 часов, иногда больше, если, например, нужно было сделать квадрупульные ПНВ. Этот рабочий процесс был *невероятно быстрым*, правда. Однако он страдал от проблем, которые были отталкивающими для меня как разработчика:
- Каждый персонаж требовал как минимум 8 часов работы, конечно, могло быть и меньше... но это приходилось оплачивать.
- Невозможно переиспользовать *любые* части уже существующих персонажей.
- Более высокий уровень детализации usually означал прохождение нескольких кругов ада. Хочешь прокатиться по аду?
- Моделирование твёрдых поверхностей (упомянутые ПНВ) довольно сложно.
- Практически невозможно вернуться и изменить *одну маленькую деталь* в модели.
- И так далее, если у тебя есть определённый опыт в моделировании, ты можешь назвать *ещё больше* таких пунктов.

[c]Цель[/c]
//img:character_builder/new0.jpg
Итак, как было сказано, Character Builder - это [c]\"must-have\"[/c], когда дело доходит до создания любых персонажей в этой игре отныне. Даже если альтернативные способы всё ещё доступны, [c]настоятельно рекомендуется[/c] использовать этот инструмент вместо них. Он избавляет от множества проблем при компоновке одежды, переиспользовании деталей и, конечно, самое главное - он оптимизирует как рабочее время, так и производительность итоговых персонажей во время выполнения.

Чтобы использовать этот инструмент, просто перейди в локацию под названием [c]character_builder[/c], вот и всё. Имей в виду: эта локация [r]НЕ БУДЕТ работать в экспортированной игре[/r], поскольку она полагается на инструменты экспорта GLTF, которые [c]доступны только в редакторных сборках.[/c]

[t]Техническая сторона[/t]

Во-первых, тебе нужно знать, что весь редактор практически сделан в одной сцене: [c]res://modules/character_builder/assets/editor_scenes/character_builder.tscn[/c]. Конечно, он использует набор подсцен для более сложных частей, таких как контроллер камеры, персонаж, UI и gizmos.

[c]Структура сцены[/c]
//img:character_builder/scene_structure0.jpg
[c]world_env[/c] и [c]env[/c] - эти два просто настраивают окружение для фона
[c]cam_rotation[/c] - контроллер камеры, простые управления, назначенные на правую кнопку мыши
[c]character[/c] - сам персонаж, представляет собой сложную модель со всеми мешами частей/деталей персонажа на ней, он также содержит логику экспорта в коде этого узла
[c]ui_layer/editor_UI[/c] - весь UI этого редактора, довольно сложная подсцена со всеми видами узлов, производных от [c]Control[/c]
[c]position[/c] и [c]rotation[/c] - gizmos, используемые системой для перемещения объектов (в основном используются для деталей)
[c]screenshot_viewport[/c] - просто вьюпорт, который делает скриншоты для файлов сохранений персонажей

[c]Структура файлов[/c]
//img:character_builder/file_structure0.jpg
[c]res://modules/character_builder/assets/char_base/[/c] - содержит заглушку гуманоидного персонажа
[c]res://modules/character_builder/assets/editor_scenes/[/c] - набор папок, относящихся к главной сцене редактора (включая саму сцену)
[c]res://modules/character_builder/assets/editor_scenes/character/[/c] - сцены, относящиеся к модели персонажа, в данном случае, сцена персонажа, а также сцена экспорта материалов
[c]res://modules/character_builder/assets/editor_scenes/editor/[/c] - общие штуки редактора, такие как контроллер камеры, эта папка содержит [c]camera.tscn[/c], которая работает как вью от первого лица в режиме noclip, однако она была сделана в первой версии этого инструмента и была удалена из-за неудобства использования в этом случае
[c]res://modules/character_builder/assets/editor_scenes/editor_UI/[/c] - содержит сцену UI редактора, а также папку, содержащую различные сложные элементы UI, используемые этим UI редактора, эта папка также содержит файл темы ресурса
[c]res://modules/character_builder/assets/editor_scenes/editor_UI/parts/[/c] - сложные части UI редактора, которые относятся к различным спискам, селекторам и, самое главное - окну комбайнера материалов
[c]res://modules/character_builder/assets/textures/[/c] - некоторые текстуры, используемые в основном UI

Этот модуль также содержит [c]скрытые папки[/c], которые будут рассмотрены в другом разделе этой документации.

[c]Структура кода и принципы[/c]

В отличие от некоторых других похожих модулей, таких как [c]comics_renderer[/c], этот модуль пытается максимально использовать принцип \"вызов вниз, сигнал вверх\", чтобы избежать беспорядка в коде. К сожалению, это приводит к безумному количеству шаблонного кода, но в целом организация более-менее понятна. Даже если я хочу рассказать о каждом скрипте подробно, у них есть свои собственные страницы документации. Здесь я хотел бы указать на те, которые довольно важные для этого модуля, чтобы тебе было легче начать ориентироваться здесь.

[c]res://modules/character_builder/src/character_builder.gd[/c] - это основной скрипт в этой системе, он работает как скотч для модели персонажа и UI. Он соединяется со всеми сигналами этих двух и заставляет их общаться друг с другом через вызовы сигналов. Если модель персонажа изменила список частей, UI редактора будет обновлён соответственно. Если меню комбайнера материалов получило некоторые изменения, персонаж получит информацию об этом от этого основного скрипта, который получит эту информацию из сигнала. Вызов вниз, сигнал вверх - в этом цель всего этого скрипта. Конечно, он вышел за эти рамки, когда дело доходит до следующих пунктов:
- Управление вводом
- Синхронизация UI / Контроллера камеры (не принимать ввод, если курсор в UI)
- Логика выделения объектов (в основном используется для \"деталей персонажа\")
- Обработка логики сохранения/загрузки
Вся эта логика помогает сделать этот инструмент пригодным для использования конечным пользователем; Делает их счастливыми, понимаешь, удовлетворёнными этой жизнью, дополнительный дофамин в их мозгу, заставляет их забыть все неприятности, которые они испытали в этой жизни, ты понимаешь, о чём я.

[c]res://modules/character_builder/src/editor_UI/editor_UI.gd[/c] - это код UI редактора и, да, здесь не так уж много можно увидеть, это по сути полностью реализованный скрипт \"вызов вниз, сигнал вверх\", который соединяет все части вместе, предоставляя список сигналов, пригодных для использования <code>character_builder.gd</code>

[c]res://modules/character_builder/src/character/character.gd[/c] - в некотором роде, своего рода сердце во всей этой системе. Это код, который работает с моделью персонажа, а именно:
- Организация/Обработка частей и деталей персонажа
- Экспорт в GLTF с комбинированными наборами текстур
- Работа с сохранением/загрузкой
Несмотря на то, что этот скрипт работает с экспортом, имей в виду: окно комбайнера материалов - это то, что делает экспорт возможным, только при правильной конфигурации [c]character.gd[/c] может функционировать как экспортёр.

[c]res://modules/character_builder/src/character/material_export.gd[/c] - все наборы текстур рендерятся в отдельном [c]Viewport[/c], чтобы later быть объединёнными в [c]character.gd[/c]. Этот важен, потому что материалы могут иметь разные конфигурации, и [c]material_export.gd[/c] принудительно заставляет все материалы сохраняться в PBR набор, состоящий из карт \"Diffuse\", \"Normal\" и \"MRS\". Имей в виду, вся логика \"объединения наборов текстур\" размещена в [c]character.gd[/c], а не здесь.

[c]res://modules/character_builder/src/editor_UI/parts/material_combiner.gd[/c] - код для UI комбинирования материалов. Этот важно упомянуть, потому что это источник всей информации относительно комбинации наборов текстур; Он экспортирует данные, которые later используются [c]character.gd[/c]

[c]res://modules/character_builder/src/autoload/character_builder_utilities.gd[/c] - автозагрузка, также известная как [c]CharacterBuilderUtilities[/c], этот синглтон существует, чтобы покрыть основные потребности обработки моделей в этом модуле, которые требуются частям/деталям персонажа, а также определённым элементам UI

Для получения более подробной информации относительно других скриптов в этом модуле, пожалуйста, прочти документацию этих скриптов или загляни в их исходный код.

[c]Скрытые папки[/c]
//img:character_builder/hidden_folders0.jpg
[c]res://modules/character_builder/assets/[/c] содержит набор скрытых папок. Godot игнорирует все папки, которые начинаются с точки, например, [c].game_export[/c] в частности. В этом случае Godot не будет импортировать любые файлы там, и они не будут видны в [c]FileSystem[/c]. Помимо игнорирования шага импорта этого движка, есть ещё одна причина для такого дизайнерского решения: Этот проект содержит множество файлов, которые замедляют работу [c]FileSystem[/c], что приводит к гораздо более медленному обнаружению импортируемых файлов, более медленному времени сохранения и т.д. Более того, эта система полагается на загрузку ресурсов во время выполнения с помощью [gd]CharacterBuilderUtilities.load_image_texture[/gd] и [gd]PackedSceneGLTF.import_gltf_scene[/gd] как способ пропустить мучительную часть импорта ассетов Godot. Это также позволяет не закрывать приложение, если ты импортировал новую деталь, ты можешь просто перезагрузить ассеты, и это позволит тебе продолжать работу над своим персонажем.

Список скрытых папок:
[c].char_detail_sources[/c] - содержит исходные файлы, относящиеся к деталям персонажа, включая файлы Blender, а также запечённые карты
[c].char_details[/c] - экспортированные файлы всех деталей персонажа, которые загружаются системой для работы
[c].char_parts[/c] - экспортированные файлы всех частей персонажа
[c].char_parts_sources[/c] - исходные файлы частей персонажа (как [c].char_detail_sources[/c])
[c].GLTF_exports[/c] - все экспортированные персонажи, они всегда оказываются здесь при экспорте, даже если ты отключишь экспорт в модуль [c]human_model[/c]
[c].saved_characters[/c] - файлы сохранений всех персонажей

Потенциальные случаи использования этих скрытых папок рассматриваются в разделе [c]Как ты можешь импортировать свои собственные ассеты? / Организация скрытых папок[/c] на этой странице документации. Прокрути вниз, ты найдёшь это там.

[t]Как использовать?[/t]

[c]Начало[/c]
Чтобы начать использовать Character Builder, ты можешь переключиться на локацию под названием [c]character_builder[/c], введя консольную команду: [c]change_location character_builder[/c]. Или, как альтернатива, ты можешь просто использовать дев-меню. В любом случае, как только ты переключишься на эту локацию, ты увидишь стандартную настройку.
//img:character_builder/use0.jpg

[c]Смена имени[/c]
Как только ты начнёшь работать над новым персонажем, тебе, возможно, потребуется сменить имя своего персонажа. Ты можешь сделать это, нажав кнопку \"Edit\" на верхней панели и введя имя своего персонажа. После того как ты нажмёшь \"Apply\", это изменит имя твоего персонажа.
//img:character_builder/use1.jpg

[c]Сохранение[/c]
Нажав save, ты сохранишь персонажа с этим именем. Если существуют файлы сохранений с таким же именем - они будут автоматически перезаписаны, так что будь осторожен.
//img:character_builder/use2.jpg

[c]Загрузка[/c]
Ты также можешь загрузить всех существующих персонажей, нажав кнопку \"Load\", в меню ты сможешь увидеть имена существующих персонажей, а также их превью для более лёгкого понимания, что это за персонаж.
//img:character_builder/use3.jpg

[c]Части персонажа[/c]
Когда ты создаёшь нового персонажа, тебе, возможно, понадобится добавить свою первую часть персонажа. Ты можешь сделать это, нажав кнопку \"Add a character part\" слева.
//img:character_builder/use4.jpg
После нажатия этой кнопки ты увидишь меню всех доступных частей персонажа. Ты можешь добавлять любые части персонажа без каких-либо ограничений, если это соответствует твоему художественному видению. После того как ты добавишь часть персонажа, окно выбора НЕ закроется, позволяя тебе добавить несколько частей.
//img:character_builder/use5.jpg
Если ты хочешь редактировать свойства своей новой части, ты можешь нажать кнопку [o] в списке частей слева.
//img:character_builder/use6.jpg
Это даст тебе доступ к параметрам трансформации, а также к редактированию материалов. Нажав на кнопку редактирования материала, ты увидишь список свойств в окне \"Material Editor\", где ты можешь менять текстуры своей части или настраивать параметры материала согласно своему вкусу или потребностям. Если эта часть тебе больше не нужна, ты можешь просто нажать \"Remove\" в окне свойств.
//img:character_builder/use7.jpg

[c]Детали персонажа[/c]
Если ты закончил работать с частями персонажа любого вида, тебе, вероятнее всего, захочется поработать с деталями этого персонажа. Ты можешь сделать это, добавив их кнопкой \"Add a character detail\". Процесс *очень* похож на добавление частей персонажа, за исключением одного существенного различия, которое делает детали персонажа уникальным инструментом в руках художника. В отличие от частей персонажа, ты можешь выбирать детали, просто жмякая на них во вьюпорте Character Builder. Это даст тебе возможность использовать gizmos для позиционирования и вращения этих деталей. Таким образом, ты можешь добавлять подсумки для магазинов к своей разгрузке. Имей в виду, детали прикрепляются к конкретной кости (в отличие от частей, которые имеют множественные влияния). Когда ты выбираешь деталь, ты можешь указать группу костей и, как следствие: кость, к которой нужно прикрепить эту деталь. Ты можешь использовать кнопку \"Toggle Idle Pose Animation\" для воспроизведения тестовой анимации, чтобы узнать, как твои детали двигаются вместе с персонажем.
//img:character_builder/use8.jpg

[c]Экспорт[/c]
Когда ты закончил создание своего персонажа, тебе, наверное, захочется экспортировать этого персонажа для импорта в игру как \"Модель человека\". Однако тебе нужно понимать, что этот процесс состоит из нескольких шагов. Самые важные из них - \"Конфигурация комбинирования материалов\" и \"Интеграция BlenderFastTools\"

[c]Экспорт - Конфигурация комбинирования материалов[/c]
Если ты попытаешься экспортировать модель персонажа сразу без конфигурации, ты получишь ошибку: [c]Export error: Please, configure material combining without errors.[/c]
//img:character_builder/use9.jpg
В этом случае тебе нужно нажать кнопку \"Material Config\", она расположена слева.
//img:character_builder/use10.jpg
Как только ты нажмёшь эту кнопку, ты увидишь высокоспециализированное нанотехнологичное не-ИИ чёртово шедевральное окно для размещения простых квадратных форм, чтобы превратить их в единый комбинированный бомбический оптимизированный высококачественный набор текстур.
//img:character_builder/use11.jpg
Ах да, мне было так скучно писать эту штуку на данном этапе, что я не мог отказаться от добавления нескольких маркетинговых словечек, которые держали бы тебя вовлечённым... В любом случае, что я говорил... ты откроешь это окно, оно будет содержать список материалов слева.
//img:character_builder/use12.jpg
Все эти материалы имеют checkbox, как только ты нажмёшь checkbox - этот материал появится в текстурированном поле.
//img:character_builder/use13.jpg
Даже если ты можешь разместить одну текстуру поверх другой, имей в виду - UV будут размещены соответственно. Так что ты должен размещать их на своих уникальных местах без каких-либо пересечений. Если у тебя будут пересечения, ты увидишь предупреждение слева. Overlaps не остановят тебя от экспорта модели.
//img:character_builder/use14.jpg
Ты можешь настроить размер отдельного материала слева, изменив значение \"x1.0\" на что-то другое.
//img:character_builder/use15.jpg
И, если ты закончил с размещением своих материалов, ты также можешь изменить \"Tex. Size Limit\", чтобы изменить размер итоговой текстуры, если значение по умолчанию может быть слишком низким для твоих потребностей. Ты можешь установить лимит размера на максимальное значение, и система будет использовать только необходимое разрешение текстуры.
//img:character_builder/use16.jpg
Как только ты закончил со всем, ты можешь нажать \"Export GLTF\", и это экспортирует твою модель. Имей в виду, что checkbox \"Export Human Tex\" экспортирует твои текстуры в папку модели человека, которая расположена по адресу [gd]\"res://modules/human_model/assets/models/[CHARACTER_NAME_HERE]\"[/gd].
//img:character_builder/use17.jpg

[c]Экспорт - Интеграция BlenderFastTools[/c]
Открой версию Blender, которая имеет полную поддержку плагина \"BlenderFastTools\". На данный момент 2.83 или 4.x - единственные совместимые версии. Перейди в окно \"Scene Properties\", прокрути вниз до конца раздела \"BlenderFastTools\".
//img:character_builder/use18.jpg
//img:character_builder/use19.jpg
Ты увидишь категорию под названием \"Import Character\", в которой есть много предупреждений, написанных на экстремально-радикально вежливом английском.
//img:character_builder/use20.jpg
Нажми кнопку \"Update character list\", а затем выбери персонажа, которого хочешь импортировать, в панели \"Character Builder import\".
//img:character_builder/use21.jpg
После нажатия \"Import Character\" ты импортируешь персонажа, созданного в Character Builder.
//img:character_builder/use22.jpg
Импортированный персонаж разделён на части и детали. Ты можешь либо соединить всё вместе, нажав \"A\", а затем \"Ctrl + J\", либо настроить определённые части в режиме редактирования, чтобы они лучше подходили.
//img:character_builder/use23.jpg
После соединения всего вместе тебе нужно переименовать единственный mesh-объект в \"character\".
//img:character_builder/use24.jpg
После этого ты получишь доступ к категории \"Human Model\" (она находится выше в разделе), где ты можешь найти кнопку \"Export character\".
//img:character_builder/use25.jpg
Прежде чем нажать эту кнопку, убедись, что ты сохранил свой .blend файл с подходящим именем персонажа, которого хочешь экспортировать. Настоятельно рекомендуется хранить все модели человеческих персонажей в [gd]\"res://.dev_sources/human_models/\"[/gd]. Как только ты сохранил свой файл, ты можешь нажать \"Export character\", что автоматически экспортирует соответствующий GLTF файл в [gd]\"res://modules/human_model/assets/models/[CHARACTER_NAME_HERE]\"[/gd].
//img:character_builder/use26.jpg

[c]Финальная конфигурация[/c]
Убедись, что посетил эту папку в Godot, чтобы импортировать модели и настроить материалы, назначив им правильные значения и текстуры во всех слотах.
//img:character_builder/use27.jpg
По умолчанию Godot импортирует материалы [gd]SpatialMaterial[/gd] вместо [gd]UserSpatialUbershader[/gd], которые используются для всех материалов в этой игре. Во-первых - тебе нужно заменить [gd]SpatialMaterial[/gd] на [gd]UserSpatialUbershader[/gd]. Ты можешь просто удалить файл, создать новый ресурс (с тем же именем, заметь) и тогда всё будет круто. Однако это может быть слишком медленно, так что я хотел бы показать более лёгкий метод. Сначала скопируй путь к папке...
//img:character_builder/use28.jpg
Затем открой меню [c]OtherKit[/c]...
//img:character_builder/use29.jpg
Кликни здесь несколько раз...
//img:character_builder/use30.jpg
Найди вкладку \"Material Replace\", введи путь к папке, нажми \"Replace\"
//img:character_builder/use31.jpg
Хотя это может показаться более сложным, чем делать это по-старинке, я лично нахожу это быстрее, потому что окно \"Create a new resource\" в этом проекте работает медленно, плюс я слишком ленив, чтобы \"правильно\" сохранять ресурс, тогда как этот инструмент помогает обнаружить любой [gd]SpatialMaterial[/gd] и заменить их соответственно. Однако вернёмся к конфигурации. Когда ты получил в свои руки новый [gd]UserSpatialUbershader[/gd], тебе нужно включить эффекты... Также убедись, что изменил [c]Diffuse Mode[/c] на [gd]\"Burley\"[/gd] и [c]Specular Mode[/c] на [gd]\"Schlick GGX\"[/gd]...
//img:character_builder/use32.jpg
//img:character_builder/use33.jpg
Для большинства персонажей тебе понадобятся эффекты [c]Albedo[/c], [c]Normal Map[/c], [c]MRS[/c]. Sometimes - [c]Emission[/c]. Все эти эффекты будут более чем достаточными, чтобы сделать приличных персонажей любой сложности. После того как ты закончил включать эффекты, нажми [c]Force Update[/c], чтобы обновить шейдер в этом материале в соответствии с требованиями рендерера.
//img:character_builder/use34.jpg
После того как ты обновил материал, ты можешь назначить текстуры в слоты. Имей в виду - изначально твой материал будет полностью чёрным, так что не забудь изменить [c]Albedo Color[/c] на белый. Более того, [c]Normal Map Power[/c] по умолчанию равен [c]0.0[/c], убедись, что изменил значение на [c]1.0[/c], чтобы normal map оказывал полное влияние на освещение этого материала. После всего этого - мистер Shitass0 должен выглядеть свежо и чисто.
//img:character_builder/use35.jpg

[c]Использование твоего нового крутого персонажа для NPC[/c]
Ладно, немного оффтопа здесь, поскольку это выходит за рамки этого модуля в целом... Но давай будем честны, ты был бы более чем счастлив увидеть своего нового крутого персонажа на определённом NPC в этой игре, верно? Так что давай сделаем это. [gd]\"res://modules/non_playable_character/assets/characters/\"[/gd] содержит все конфиги NPC-персонажей этой игры, так что ты можешь найти класс по своему выбору. Давай отредактируем [c]agent[/c]...
//img:character_builder/use36.jpg
И затем ты просто редактируешь имя модели здесь, в этом массиве...
//img:character_builder/use37.jpg

[t]Как ты можешь импортировать свои собственные ассеты? / Организация скрытых папок[/t]
Как только ты встал на ноги и создал персонажа своей мечты, ты, скорее всего, задумаешься, как добавить пользовательские ассеты в этот инструмент. Это довольно легко, однако тебе нужно знать правила этой системы. Во-первых, ты можешь изучить быстрее, если изучишь уже существующие исходные файлы, размещённые в папках [p]modules/character_builder/assets/.char_parts_sources/[/p] и [p]modules/character_builder/assets/.char_detail_sources/[/p], а также уже экспортированные [p]modules/character_builder/assets/.char_parts/[/p] и [p]modules/character_builder/assets/.char_details/[/p]. Изучая эти файлы, у тебя есть хороший шанс увидеть паттерны повсюду и отправиться в своего рода бэд-трип. Either way, я пишу это руководство, так что... Я полагаю мне всё равно нужно будет объяснить это.
//img:character_builder/import0.jpg

[c]Геометрия частей персонажа[/c]
Чтобы сделать proper кусок геометрии для твоей части персонажа, тебе сначала нужно получить proper \"арматуру\" в Blender. [p]human_rig[/p] - это скелет, который используется всеми человеческими моделями и частями персонажей. Ты не можешь создать его самостоятельно, тебе нужно получить его откуда-то ещё. Ты можешь легко получить скелет, нажав \"Import Human Armature\" или импортировав персонажа, которого хотел бы разработать.
//img:character_builder/import1.jpg
Как только ты получил арматуру (желательно с какой-нибудь геометрией гуманоидного персонажа), ты можешь создать свою часть персонажа. Обычно это так же просто, как создать геометрию поверх базовой человеческой меш-сетки. Я бы описал тебе детальное руководство о том, как делать модели здесь, но я бы предположил, что за твоей спиной годы опыта и ты сам знаешь, как делать эти штуки.
//img:character_builder/import2.jpg
Когда ты закончил со своей моделью, убедись, что назвал свой mesh-объект [p]char_part[/p], таким образом BlenderFastTools обнаружит его как экспортируемую mesh-сетку части персонажа. Перед экспортом, пожалуйста, убедись, что у тебя есть правильные веса вершин (меш привязан к арматуре и деформируется ею корректно) и что имя материала - это то, с чем ты сможешь работать (и оно достаточно уникально, чтобы не вызывать конфликтов с другими частями/деталями). Настоятельно рекомендуется называть свои материалы так же, как ты называешь свою часть персонажа. Если ты делаешь \"armor0_m\", то назови свой материал \"armor0_m\", если материалов несколько - просто добавь номер в конце.
//img:character_builder/import3.jpg
После проверки всего: Нажми [gd]\"Export character part\"[/gd] в панели \"Character Builder\". Это экспортирует GLTF твоей части персонажа.
//img:character_builder/import4.jpg
Однако тебе нужно подготовить текстуры. Все экспортированные текстуры должны следовать следующему pattern:
[gd]
\"[matname]_D.tga\" # Diffuse / Color map
\"[matname]_N.tga\" # Normal map
\"[matname]_MRS.tga\" # Metal-Roughness-Specular packed map
\"[matname]_E.tga\" # Emission map
[/gd]
Сохраняй свои имена консистентными, если твой материал называется \"armor0_m\", тогда имя твоего файла изображения будет [gd]\"armor0_m_D.tga\"[/gd]. Ты сохраняешь свои текстуры в папке экспортированной части персонажа. Чтобы найти свою экспортированную часть персонажа, перейди в [gd]\"modules/character_builder/assets/.char_parts/\"[/gd] и найди папку с именем твоей части персонажа. Как только ты экспортируешь все текстуры туда, всё должно быть fine, ты можешь перейти в Character Builder, обновить ассеты и добавить свою часть персонажа.
//img:character_builder/import5.jpg
Имей в виду, если что-то пошло не так - не закрывай Character Builder, ты можешь просто исправить файлы, переэкспортировать stuff и затем обновить ассеты в Character Builder.
//img:character_builder/import6.jpg

[c]Геометрия деталей персонажа[/c]
Это действительно похоже на экспорт частей персонажа, за исключением того, что детали персонажа не должны быть привязаны к какой-либо арматуре для экспорта, они могут иметь любой origin и т.д. По сути, они просто объекты, как пропсы локаций, но сделанные для модели персонажа. Все принципы, связанные с текстурами и экспортом, применяются и здесь, но ты просто используешь [gd]\"Export character detail\"[/gd]. Это действительно всё, что тебе нужно знать. Для получения дополнительной информации, пожалуйста, перечитай.
//img:character_builder/import7.jpg

[c]Субтекстуры[/c]
Они работают прям как обычные текстуры, упомянутые выше, \"main/default\" текстуры, используемые для части/детали. Однако любая часть/деталь может получить вторичный набор этих текстур, и количество этих наборов может быть неограниченным. Чтобы сделать свою собственную субтекстуру, пожалуйста, создай/найди папку [gd]\"subtextures\"[/gd] внутри директории твоей части/детали. Затем внутри создай папку со следующим правилом именования: [gd]\"[mat_name]__[subtex_name]\"[/gd]. Например: [gd]\"armor0_m__osec\"[/gd]. В этом случае имей в виду, что двойной символ подчёркивания помечает разделение между именем материала и именем набора суб-текстур. Имей в виду, эта система была разработана даже для тех моделей, которые могут иметь несколько материалов, так что включение имени материала сначала всегда требуется для proper функционирования этой системы. В качестве примера ты можешь изучить следующую директорию: [gd]\"modules/character_builder/assets/.char_parts/6b93_helmet_28x/subtextures/6b93_helmet__black/\"[/gd].
//img:character_builder/import8.jpg"
edit_time = 1.76112e+09
