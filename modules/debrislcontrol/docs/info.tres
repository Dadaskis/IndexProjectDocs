[gd_resource type="Resource" load_steps=2 format=2]

[ext_resource path="res://modules/doc_info/src/doc_info.gd" type="Script" id=1]

[resource]
script = ExtResource( 1 )
info = "Contains only [gd]DebrisControl[/gd] singleton that is being a global queue with extra steps. It was made for optimization of debris, it removes excessive amount of those. If overall amount of debris goes beyond the limit, the oldest pieces will be removed first.

[c]Usage Example[/c]
[gd]
if not DebrisControl.can_create_debris():	# Stops initialization if there's too much debris
	return
DebrisControl.add_debris(self)					# Adds debris
[/gd]

All debris nodes need to have a [gd]remove_debris[/gd] method that will be called upon their \"removal\". [gd]DebrisControl[/gd] itself is NOT removing any nodes because they might need special treatment (aka removing from a scene tree instead of [gd]queue_free[/gd]ing them)."
info_rus = "Содержит только синглтон [gd]DebrisControl[/gd], который является глобальной очередью с дополнительными шагами. Он был создан для оптимизации обломков, удаляя их чрезмерное количество. Если общее количество обломков идёт свыше лимита, самые старые куски будут удалены первыми.

[c]Пример использования[/c]
[gd]
if not DebrisControl.can_create_debris():	# Останавливает инициализацию, если слишком много обломков
	return
DebrisControl.add_debris(self)					# Добавляет обломки
[/gd]

Все узлы обломков должны иметь метод [gd]remove_debris[/gd], который будет вызываться при их \"удалении\". Сам [gd]DebrisControl[/gd] НЕ удаляет никакие узлы, потому что они могут требовать переиспользования (aka удаление из дерева сцены вместо [gd]queue_free[/gd] их)."
edit_time = 1.76113e+09
