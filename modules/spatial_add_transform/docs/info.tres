[gd_resource type="Resource" load_steps=2 format=2]

[ext_resource path="res://modules/doc_info/src/doc_info.gd" type="Script" id=1]

[resource]
script = ExtResource( 1 )
info = "So, sit down, feel yourself comfortable, and listen to my story... Let's assume that you are making a hyper-complex player controller that is going to kick anyone's ass. Hell yeah. Feeling good. Anyway, there's a problem... A lot of things that make your controller \"alive\" are related to camera movements. So, how would you handle this all without turning it into a messy spaghetti that'll shoot your legs off? **DING-DING-DING** you are right! This is what this module is all about! It wasn't really a nice story, but you get the point.

[gd]SpatialAddTransformManager[/gd] is a node that is added as a child of any [gd]Spatial[/gd]-extended node. It will apply some magic tricks of offsets to the parent. All of the changes are additive and are controlled through [gd]SpatialAddTransformData[/gd] class. Simply saying, you use [gd]SpatialAddTransformManager[/gd] to register [gd]SpatialAddTransformData[/gd] and then you change its data to control offsets. This way you can have a lot of factors that can affect your potential camera's view without doing it in a destructive way. Of course, it was made for cameras in mind, but it can be used for any [gd]Spatial[/gd]-extending node because, like, we are software engineers, loving extensible things that does stuff outside its original scope, right?.. Right?..

[c]Usage example[/c]
[gd]
var camera: Camera # Let's assume you have one
# ...

var manager = SpatialAddTransformManager.new()
camera.add_child(manager)
manager.initialize()

# ...

var data: = manager.register_data(true)
# ^^^ \"true\" argument is needed to immediately add it to the list
data.degrees_rotation = Vector3(30.0, 0.0, 0.0)

# Tada, it should affect your transforms
[/gd]

Check documentation of [gd]SpatialAddTransformData[/gd] and [gd]SpatialAddTransformManager[/gd] to find out what else they can do.

[r]For more information, please reread.[/r]"
info_rus = "Итак, присядь, устройся поудобнее и послушай мою историю... Допустим, ты делаешь гипер-сложный контроллер игрока, который надерёт всем задницы. О да. Приятное чувство. В любом случае, есть проблема... Многие вещи, которые делают твой контроллер \"живым\", связаны с движениями камеры. Так как же ты справишься со всем этим, не превратив это в спагетти-код, который отстрелит тебе ноги? **ДЗЫНЬ-ДЗЫНЬ-ДЗЫНЬ** ты прав! Именно для этого и нужен этот модуль! Это была не очень хорошая история, но ты понял суть.

[gd]SpatialAddTransformManager[/gd] - это нода, которая добавляется как ребёнок к любой ноде, наследующей от [gd]Spatial[/gd]. Она применяет некоторые магические трюки со смещениями к родителю. Все изменения аддитивные и управляются через класс [gd]SpatialAddTransformData[/gd]. Проще говоря, ты используешь [gd]SpatialAddTransformManager[/gd], чтобы зарегистрировать [gd]SpatialAddTransformData[/gd], а затем изменяешь его данные для управления смещениями. Таким образом, у тебя может быть множество факторов, которые могут влиять на вид твоей потенциальной камеры, без деструктивного вмешательства. Конечно, это было сделано с прицелом на камеры, но может использоваться для любой ноды, наследующей от [gd]Spatial[/gd], потому что, типа, мы же software engineers, любим расширяемые штуки, которые делают вещи за пределами их изначального скоупа, верно?.. Верно?..

[c]Пример использования[/c]
[gd]
var camera: Camera # Допустим, она у тебя есть
# ...

var manager = SpatialAddTransformManager.new()
camera.add_child(manager)
manager.initialize()

# ...

var data: = manager.register_data(true)
# ^^^ Аргумент \"true\" нужен, чтобы сразу добавить его в список
data.degrees_rotation = Vector3(30.0, 0.0, 0.0)

# Та-да, это должно повлиять на твои трансформы
[/gd]

Загляни в документацию [gd]SpatialAddTransformData[/gd] и [gd]SpatialAddTransformManager[/gd], чтобы узнать, что ещё они умеют.

[r]Для получения дополнительной информации, пожалуйста, перечитай.[/r]"
edit_time = 1.76123e+09
