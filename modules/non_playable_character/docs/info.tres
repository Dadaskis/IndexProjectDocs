[gd_resource type="Resource" load_steps=2 format=2]

[ext_resource path="res://modules/doc_info/src/doc_info.gd" type="Script" id=1]

[resource]
script = ExtResource( 1 )
info = "So let's talk about this horrible piece of shit module. Yes, those are Non-Playable Characters (NPCs). Seems to be alright. However, even though this module was initially designed as a universal platform for all kinds of NPCs, not only human characters, it ended up being a module solely for human characters! You wouldn't be working with [gd]NonPlayableCharacter[/gd] that much, you'll be working with [gd]NPCHuman[/gd] all the time. It would've been nicer to call this module [p]human_characters[/p] or [p]human_NPC[/p] or [p]NPC_human[/p]. Either way, does it matter? You can just realize that this module is all about humans.

[wc]Script Structure[/wc][ctr][gd]
.
├── autoload
│   ├── NPC_attack_queue.gd
│   ├── NPC_max_distance_manager.gd
│   ├── NPC_names.gd
│   ├── NPC_position_queue.gd
│   ├── NPC_spawn_queue.gd
│   └── NPC_vision_queue.gd
├── base_script.gd
├── base_scripts
│   ├── assets
│   │   └── sounds
│   │       ├── beeping.mp3
│   │       ├── beeping.mp3.import
│   │       ├── electrowave_attack.mp3
│   │       ├── electrowave_attack.mp3.import
│   │       ├── electrowave_imbound.mp3
│   │       └── electrowave_imbound.mp3.import
│   ├── minc_chemical_unit.gd
│   ├── minc_electro_unit.gd
│   ├── minc_explosives_unit.gd
│   └── minc_heavy_unit_weak.gd
├── configs
│   ├── character_data.gd
│   ├── hitbox_damage_multiplier.gd
│   ├── hitbox_data.gd
│   └── weapon_config.gd
├── debug
│   └── logic_state_label.gd
├── logic.gd
├── nodes
│   ├── dead_body_search.gd
│   ├── dropped_weapon.gd
│   ├── NPC_spawn.gd
│   └── patrol_point_hint.gd
├── non_playable_character.gd
├── pathfinding.gd
├── state_base.gd
├── states
│   ├── citizen
│   │   ├── act_playing.gd
│   │   ├── attack_player.gd
│   │   ├── none.gd
│   │   ├── panic_anim.gd
│   │   ├── panic.gd
│   │   └── patrol.gd
│   ├── heavy_unit
│   │   ├── attack.gd
│   │   ├── attack_player.gd
│   │   ├── follow_player.gd
│   │   ├── none.gd
│   │   ├── patrol.gd
│   │   ├── stand_and_shoot.gd
│   │   ├── stand_and_shoot_player.gd
│   │   ├── test_look.gd
│   │   └── wait_enemy.gd
│   └── light_unit
│       ├── attack.gd
│       ├── attack_player.gd
│       ├── follow_player.gd
│       ├── none.gd
│       ├── patrol.gd
│       ├── stand_and_shoot.gd
│       ├── stand_and_shoot_player.gd
│       ├── test_look.gd
│       └── wait_enemy.gd
└── types
    ├── human
    │   ├── base_script_human.gd
    │   ├── human_weapon_handler.gd
    │   └── state_base_human.gd
    └── human.gd
[/gd][/ctr]

[bc]Core scripts [p]./[/p][/bc]
[p]non_playable_character.gd[/p] is a [gd]NonPlayableCharacter[/gd] base class for all NPCs. NPCs in question are humans, of course. It contains all the basic functionality needed to make an NPC, which is extended by [gd]NPCHuman[/gd].
[p]state_base.gd[/p] is a [gd]NPCLogicState[/gd] base class for logic states of NPCs. Each logic state contains unique logic to execute in Finite-State Machine of this NPC.
[p]pathfinding.gd[/p] is a [gd]NPCPathfinding[/gd] pathfinding class, it is using navigation mesh to navigate the NPC in locations.
[p]base_script.gd[/p] is a [gd]NPCBaseScript[/gd] NPC base script class that can be used for \"base scripts\" which can extend logic of certain NPCs. Usually used by [p]heavy units[/p] to make the \"fall down on the floor after too much damage\" logic.
[p]logic.gd[/p] is a [gd]NPCLogic[/gd] class that is handling the logic states and visibility detection of other characters. This class is practically being a Finite-State Machine.

[bc]Autoloads [p]./autoloads/[/p][/bc]
[gd]NPCAttackQueue[/gd] - a queue to optimize NPC attacks to prevent too many attacks in the same frame.
[gd]NPCMaxDistanceManager[/gd] - a manager of NPCs that were temporarily removed from the scene tree (due to distance) for optimization.
[gd]NPCNames[/gd] - a singleton that generates names for NPCs.
[gd]NPCPositionQueue[/gd] - [r]Obsolete[/r] Incomplete implementation for the cover system of NPCs.
[gd]NPCSpawnQueue[/gd] - a queue to make an order of NPC spawns so they would be spawning one-by-one for correct support of properties like [gd]named_npc_alive_limit[/gd] of [gd]NPCSpawn[/gd].
[gd]NPCVisionQueue[/gd] - a queue to optimize visibility checks of NPCs, only one NPC per frame does a visibility check to prevent too many checks done in one frame.

[bc]Configs [p]./configs[/p][/bc]
[gd]NPCHitboxData[/gd] - a config that contains an array of [gd]NPCHitboxDamageMultiplier[/gd] which define damage multipliers of each hitbox bone (aka head can get 2x more damage than other bones and etc).
[gd]NPCWeaponConfig[/gd] - a config for an NPC weapon, for the time being only supported for firearms.
[gd]NPCHitboxDamageMultiplier[/gd] - a config that contains a bone name and a multiplier by which the damage will be multiplied.
[gd]NPCCharacterData[/gd] - a character data config that contains a variety of settings like faction name, health/armor, human model name, assigned weapons, experience for a kill, etc.

[bc]Nodes [/p]./nodes[/p][/bc]
[p]dead_body_search.gd[/p] - a code that can be runned when you have [p]Ammo Pickup[/p] perk ([p]loot_corpses[/p] perk boolean), it is allowing the player to loot ammo from dead bodies by interacting with them.
[p]dropped_weapon.gd[/p] - a dropped weapon code, weapons of NPCs are [gd]HumanModel[/gd] weapons that were duplicated and turned into rigidbodies. This code allows to add logic to those rigidbodies to make it possible to pickup the weapon. Keep in mind, this is separate from player dropped weapons or dropped weapons that were pre-placed on any location.
[p]NPC_spawn.gd[/p] - a [gd]NPCSpawn[/gd] node that gives you a possibility to spawn an NPC, provides a huge amount of settings to configure. It is initializing an NPC once and then reuses its instance. You can only spawn one simultaneously alive NPC with this node.
[p]patrol_point_hint.gd[/p] - a patrol point hint node that allows the user to set an NPC's patrol position that can be randomly chosen in a patrol state.

[bc]Base Scripts [p]./base_scripts[/p][/bc]
Base scripts are extending the functionality of NPCs by making it possible to run additional logic on top of the NPC's code without overriding the existing code. All base scripts are stored at [p]res://modules/non_playable_character/src/base_scripts/[/p]. You can assign a base logic script in [gd]NPCCharacterData[/gd].
[c]Template[/c]
[gd]
extends NPCBaseScript

# Initialization, can be overriden
func initialize():
	pass

# Update, called each physics frame
func update(delta: float):
	pass
[/gd]

[bc]Logic States [p]./states[/p][/bc]
Each folder in [p]res://modules/non_playable_character/src/states/[/p] creates a logic set that can be defined in [gd]NPCCharacterData[/gd]. And each logic set is a set of logic states that define the NPC's behavior. NPC's logic works by the principle of Finite-State Machine.
[c]Template[/c]
[gd]
class_name _LogicSet_NameHere
# ^^^
# It is important to have a class name defined for a logic state due to additional performance.
# It isn't necessary for functionality, but, for some reason, a class name optimizes the work
# of logic states.

extends NPCLogicStateHuman

# Runs when NPCLogic switches on this state
func on_switch() -> void:
	pass

# An update that happens during _physics-process
func update(delta: float) -> void:
	pass
[/gd]

[bc]Types [p]./types[/p][/bc]
Remember I said it was supposed to be a universal platform for NPCs? So yeah, [gd]NPCHuman[/gd] have captured this entire module and now [p]human.gd[/p] is the heart of this module. It is defining the human NPCs, that are being the only working type here. It may be possible to make different types still, but it would require quite a rewrite. Deep in that NPC system, there's still a support for types so yeah there's that folder too.

[wc]Creation of NPCs[/wc]
//img:non_playable_character/adding0.png
//img:non_playable_character/adding1.png
0. Create a new folder for your character at [p]res://modules/non_playable_character/assets/characters/[/p], your new folder's name is going to be a name for NPC character class.
1. Create [p]config.tres[/p] as [gd]NPCCharacterData[/gd]
2. Define the settings
[r]If you want to make a new model for NPC instead of using an existing one, please, take a look at [p]human_model[/p] or [p]character_builder[/p] module docs.[/r]"
info_rus = "Итак, давайте поговорим об этом ужасном piece of shit модуле. Да, это Не-Игровые Персонажи (NPC). Кажется, всё в порядке. Однако, хотя этот модуль изначально был задизайнен как универсальная платформа для всех типов NPC, не только человеческих персонажей, он оказался модулем только для человеческих персонажей! Ты не будешь работать с [gd]NonPlayableCharacter[/gd], ты будешь работать с [gd]NPCHuman[/gd] всё время. Было бы круче назвать этот модуль [p]human_characters[/p] или [p]human_NPC[/p] или [p]NPC_human[/p]. В любом случае, имеет ли это значение? Ты можешь просто осознать, что этот модуль - это всё о людях.

[wc]Структура скриптов[/wc][ctr][gd]
.
├── autoload
│   ├── NPC_attack_queue.gd
│   ├── NPC_max_distance_manager.gd
│   ├── NPC_names.gd
│   ├── NPC_position_queue.gd
│   ├── NPC_spawn_queue.gd
│   └── NPC_vision_queue.gd
├── base_script.gd
├── base_scripts
│   ├── assets
│   │   └── sounds
│   │       ├── beeping.mp3
│   │       ├── beeping.mp3.import
│   │       ├── electrowave_attack.mp3
│   │       ├── electrowave_attack.mp3.import
│   │       ├── electrowave_imbound.mp3
│   │       └── electrowave_imbound.mp3.import
│   ├── minc_chemical_unit.gd
│   ├── minc_electro_unit.gd
│   ├── minc_explosives_unit.gd
│   └── minc_heavy_unit_weak.gd
├── configs
│   ├── character_data.gd
│   ├── hitbox_damage_multiplier.gd
│   ├── hitbox_data.gd
│   └── weapon_config.gd
├── debug
│   └── logic_state_label.gd
├── logic.gd
├── nodes
│   ├── dead_body_search.gd
│   ├── dropped_weapon.gd
│   ├── NPC_spawn.gd
│   └── patrol_point_hint.gd
├── non_playable_character.gd
├── pathfinding.gd
├── state_base.gd
├── states
│   ├── citizen
│   │   ├── act_playing.gd
│   │   ├── attack_player.gd
│   │   ├── none.gd
│   │   ├── panic_anim.gd
│   │   ├── panic.gd
│   │   └── patrol.gd
│   ├── heavy_unit
│   │   ├── attack.gd
│   │   ├── attack_player.gd
│   │   ├── follow_player.gd
│   │   ├── none.gd
│   │   ├── patrol.gd
│   │   ├── stand_and_shoot.gd
│   │   ├── stand_and_shoot_player.gd
│   │   ├── test_look.gd
│   │   └── wait_enemy.gd
│   └── light_unit
│       ├── attack.gd
│       ├── attack_player.gd
│       ├── follow_player.gd
│       ├── none.gd
│       ├── patrol.gd
│       ├── stand_and_shoot.gd
│       ├── stand_and_shoot_player.gd
│       ├── test_look.gd
│       └── wait_enemy.gd
└── types
    ├── human
    │   ├── base_script_human.gd
    │   ├── human_weapon_handler.gd
    │   └── state_base_human.gd
    └── human.gd
[/gd][/ctr]

[bc]Основные скрипты [p]./[/p][/bc]
[p]non_playable_character.gd[/p] - это базовый класс [gd]NonPlayableCharacter[/gd] для всех NPC. NPC в данном случае - это люди, конечно. Он содержит весь функционал, необходимый для создания NPC, который расширяется [gd]NPCHuman[/gd].
[p]state_base.gd[/p] - это базовый класс [gd]NPCLogicState[/gd] для логических состояний NPC. Каждое логическое состояние содержит уникальную логику для выполнения в Finite-State Machine этого NPC.
[p]pathfinding.gd[/p] - это класс поиска пути [gd]NPCPathfinding[/gd], он использует навигационную сетку для навигации NPC в локациях.
[p]base_script.gd[/p] - это базовый класс скриптов NPC [gd]NPCBaseScript[/gd], который может использоваться для \"базовых скриптов\", которые могут расширять логику определённых NPC. Обычно используется [p]тяжелыми юнитами[/p] для реализации логики \"падения на пол после слишком большого урона\".
[p]logic.gd[/p] - это класс [gd]NPCLogic[/gd], который обрабатывает логические состояния и обнаружение видимости других персонажей. Этот класс практически является Finite-State Machine.

[bc]Автозагрузки [p]./autoloads/[/p][/bc]
[gd]NPCAttackQueue[/gd] - очередь для оптимизации атак NPC, чтобы предотвратить слишком много атак в одном кадре.
[gd]NPCMaxDistanceManager[/gd] - менеджер NPC, которые были временно удалены из дерева сцены (из-за расстояния) для оптимизации.
[gd]NPCNames[/gd] - синглтон, который генерирует имена для NPC.
[gd]NPCPositionQueue[/gd] - [r]Устарело[/r] Неполная реализация для системы укрытий NPC.
[gd]NPCSpawnQueue[/gd] - очередь для создания порядка спавна NPC, чтобы они спавнились один-за-другим для корректной поддержки свойств типа [gd]named_npc_alive_limit[/gd] из [gd]NPCSpawn[/gd].
[gd]NPCVisionQueue[/gd] - очередь для оптимизации проверок видимости NPC, только один NPC за кадр делает проверку видимости, чтобы предотвратить too many проверок, выполненных в одном кадре.

[bc]Конфиги [p]./configs[/p][/bc]
[gd]NPCHitboxData[/gd] - конфиг, который содержит массив [gd]NPCHitboxDamageMultiplier[/gd], которые определяют множители урона каждой кости хитбокса (например, голова может получать в 2 раза больше урона, чем другие кости, и т.д.).
[gd]NPCWeaponConfig[/gd] - конфиг для оружия NPC, на данный момент поддерживается только для огнестрельного оружия.
[gd]NPCHitboxDamageMultiplier[/gd] - конфиг, который содержит имя кости и множитель, на который будет умножен урон.
[gd]NPCCharacterData[/gd] - конфиг данных персонажа, который содержит кучу настроек, таких как имя фракции, здоровье/броня, имя человеческой модели, назначенное оружие, опыт за убийство и т.д.

[bc]Узлы [/p]./nodes[/p][/bc]
[p]dead_body_search.gd[/p] - код, который может быть запущен, когда у тебя есть перк [p]Подбор патронов[/p] (булево значение перка [p]loot_corpses[/p]), он позволяет игроку собирать патроны с мёртвых тел, взаимодействуя с ними.
[p]dropped_weapon.gd[/p] - код выброшенного оружия, оружие NPC - это оружие [gd]HumanModel[/gd], которое было дублировано и превращено в rigidbodies. Этот код позволяет добавить логику этим rigidbodies, чтобы сделать возможным подбор оружия. Имей в виду, это отдельно от оружия, выброшенного игроком, или выброшенного оружия, которое было предварительно размещено на любой локации.
[p]NPC_spawn.gd[/p] - узел [gd]NPCSpawn[/gd], который даёт тебе возможность заспавнить NPC, предоставляет огромное количество настроек для конфигурации. Он инициализирует NPC once и затем переиспользует его экземпляр. Ты можешь заспавнить только одного одновременно живого NPC с этим узлом.
[p]patrol_point_hint.gd[/p] - узел подсказки точки патрулирования, который позволяет пользователю установить позицию патрулирования NPC, которая может быть случайно выбрана в состоянии патрулирования.

[bc]Базовые скрипты [p]./base_scripts[/p][/bc]
Базовые скрипты расширяют функциональность NPC, делая возможным запуск дополнительной логики поверх кода NPC без переопределения уже существующего кода. Все базовые скрипты хранятся в [p]res://modules/non_playable_character/src/base_scripts/[/p]. Ты можешь назначить базовый скрипт логики в [gd]NPCCharacterData[/gd].
[c]Шаблон[/c]
[gd]
extends NPCBaseScript

# Инициализация, может быть переопределена
func initialize():
	pass

# Обновление, вызывается каждый физический кадр
func update(delta: float):
	pass
[/gd]

[bc]Логические состояния [p]./states[/p][/bc]
Каждая папка в [p]res://modules/non_playable_character/src/states/[/p] создаёт набор логики, который может быть определён в [gd]NPCCharacterData[/gd]. И каждый набор логики - это набор логических состояний, которые определяют поведение NPC. Логика NPC работает по принципу Finite-State Machine.
[c]Шаблон[/c]
[gd]
class_name _LogicSet_NameHere
# ^^^
# Важно иметь определённое имя класса для логического состояния из-за дополнительной производительности.
# Это не обязательно для функциональности, но, по какой-то причине, имя класса оптимизирует работу
# логических состояний.

extends NPCLogicStateHuman

# Запускается, когда NPCLogic переключается на это состояние
func on_switch() -> void:
	pass

# Обновление, которое происходит во время _physics-process
func update(delta: float) -> void:
	pass
[/gd]

[bc]Типы [p]./types[/p][/bc]
Помнишь, я сказал, что это должно было быть универсальной платформой для NPC? Так что да, [gd]NPCHuman[/gd] захватил этот весь модуль, и теперь [p]human.gd[/p] - это сердце этого модуля. Он определяет человеческих NPC, которые являются единственным работающим типом здесь. Может быть возможным сделать разные типы до сих-пор, но это потребовало бы переписывания. Глубоко в этой системе NPC всё ещё есть поддержка типов, так что да, есть и эта папка тоже.

[wc]Создание NPC[/wc]
//img:non_playable_character/adding0.png
//img:non_playable_character/adding1.png
0. Создай новую папку для твоего персонажа в [p]res://modules/non_playable_character/assets/characters/[/p], имя твоей новой папки будет именем класса NPC персонажа.
1. Создай [p]config.tres[/p] как [gd]NPCCharacterData[/gd]
2. Определи настройки
[r]Если ты хочешь сделать новую модель для NPC вместо использования уже существующей, пожалуйста, загляни в документацию модулей [p]human_model[/p] или [p]character_builder[/p].[/r]"
edit_time = 1.76123e+09
