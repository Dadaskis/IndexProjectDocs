[gd_resource type="Resource" load_steps=2 format=2]

[ext_resource path="res://modules/doc_info/src/doc_info.gd" type="Script" id=1]

[resource]
script = ExtResource( 1 )
info = "Okay, so... [gd]SpatialMaterial[/gd]. Sounds like a plan. Sounds like EVERYTHING you'd ever need from a material in 3D. Yeah. Sounds nice. Sounds plausible. But what happens when you use your gigabrain to add an additional shader effect? Oh no, it's falling apart! You have to use [gd]ShaderMaterial[/gd] to make your own effects! And what if you wanna reuse something that [gd]SpatialMaterial[/gd] had? Oh, well, dude, just copypaste it or something, we don't care. I was a little pissed so I made an ultimate spaghetti management system, guess what it is? That's right, that's that module. [p]Ubershader[/p] is such a clever word, but really, it's all about automizing copypasting of the shader code. You don't have to do this 5-minute-task anymore, I spent ages refining that automized shit. Use it. Please. I beg you. Actually, it doesn't matter, all materials in this project ARE [gd]UserSpatialUbershader[/gd] so you will experience a decent peer pressure to use this one :)

This module has two classes that you really need to know about: [gd]SpatialUbershader[/gd] and [gd]UserSpatialUbershader[/gd]. [gd]SpatialUbershader[/gd] is practically the core logic of this module. This is the ultimate bombastic spaghetti combiner, mixer, manager, whatever the hell it is. However, this class alone isn't providing a user-friendly interface and due to how Godot works... Well, let's just say I was forced to do [gd]UserSpatialUbershader[/gd]. [r]This class is NOT written by hand.[/r] It provides export variables and all that fancy shit, but writing it by hand would be a suicide. That's why [p]res://modules/spatial_ubershader/assets/code_generation_scene/code_generator.gd[/p] exists, an editor script that you can run to update code in [gd]UserSpatialUbershader[/gd]. In other words, [gd]UserSpatialUbershader[/gd] is just a fancier facade to [gd]SpatialUbershader[/gd], a fucking makeup if you wish. Hides the ugly face behind. We all love fancy lies, aren't we?

[wc]Using the material while being in trenches[/wc]
//img:spatial_ubershader/use0.png
//img:spatial_ubershader/use1.png
What you need to understand this material is that it can have multiple effects. Even \"albedo\" map is an effect too. You just enable effects you need, when you are done: Click [p]Force Update[/p], it will update the shader code and paramaters that you can adjust. Each effect has its own designated group that you can extend and assign needed values/textures. Simple as that.

[wc]How to make your own badass effect[/wc]
Listen here, son, it's a very hard and intimidating task... It requires a lot of patience... Actually who am I kidding really? Take a look at [p]res://modules/spatial_ubershader/assets/effects/[/p], scroll down the effects, notice some patterns all over the place. This project is pattern-ing hard, you know? Let's take a look at our beloved [p]albedo[/p] effect.
[gd]
.
└── albedo
	├── config.tres
 	└── shader.tres
[/gd]
All your fancy-wancy shader effects MUST have two files: [p]config.tres[/p] and [p]shader.tres[/p]. [p]config.tres[/p] is just a [gd]SpatialUbershaderEffectConfig[/gd] GODDAMN THIS CLASS NAME IS KILLING ME oh I'm sorry I meant to say this is a config for your effect that is mainly useful to adjust its order priority, all effects are processed in a queue of sorts. [p]shader.tres[/p] is the shader code for your spatial shader effect.

Shaders aren't just \"shaders\" in this case, they have some meta-processing stuff that you need to know about. Let's take our beloved albedo shader as an example:
[c]
shader_type spatial; //__IGNORE_LINE__

// Albedo texture input
//__ADD_PROPERTY::effect_tex::TEXTURE
uniform sampler2D effect_tex: hint_albedo;

// Color tint multiplier
//__ADD_PROPERTY::effect_color::COLOR
uniform vec4 effect_color: hint_color;

// UV Adjustment Flag Block
// __ADD_FLAG::effect_uv_tweak
// __FLAG::effect_uv_tweak
// Horizontal texture scale
//__ADD_PROPERTY::effect_UV_scale_x::FLOAT
uniform float effect_UV_scale_x = 1.0;
// Vertical texture scale
//__ADD_PROPERTY::effect_UV_scale_y::FLOAT
uniform float effect_UV_scale_y = 1.0;
// Horizontal texture offset
//__ADD_PROPERTY::effect_UV_offset_x::FLOAT
uniform float effect_UV_offset_x = 0.0;
// Vertical texture offset
//__ADD_PROPERTY::effect_UV_offset_y::FLOAT
uniform float effect_UV_offset_y = 0.0;
// __FLAG_END

//__FRAGMENT_SPLIT__
void fragment() { //__IGNORE_LINE__
	// Base UV coordinates
	vec2 effect_uv = UV;
	
	// UV Adjustment Block (conditionally included)
	// __FLAG::effect_uv_tweak
	effect_uv.x *= effect_UV_scale_x;   // Apply horizontal scale
	effect_uv.y *= effect_UV_scale_y;   // Apply vertical scale
	effect_uv.x += effect_UV_offset_x;  // Apply horizontal offset
	effect_uv.y += effect_UV_offset_y;  // Apply vertical offset
	// __FLAG_END
	
	// Sample texture and apply color tint
	vec4 effect_tex_color = texture(effect_tex, effect_uv);
	ALBEDO = effect_tex_color.rgb * effect_color.rgb;
} //__IGNORE_LINE__
[/c]

So, you might have noticed some of the commentary that doesn't really sound humane. Sounds like a machine went rogue and it's about to murder you. Well, that's what I call meta-processing, yeah. These comments are supposed to let [gd]SpatialUbershader[/gd] know what the fuck it is supposed to do with your damn code. If you just feed it a shader with none of these things - it'll accept islam and refuse to work with you, infidel. Most likely it'll result in a broken generated shader code that won't do anything of value. Luckily for you, I'm here to help while mocking your ass. Here's the list of your damn comments that you MUST KNOW AND REMEMBER BY THE END OF READ.
[c]
Instead of \"name\" there can be anything you want, make sure the stars align though.

//__IGNORE_LINE__
	Ignores a line. I mean... Woah, surprising? Okay, you need to place that fucker down in lines with \"shader_type\" and definitions of \"void fragment()\", \"void vertex()\" and \"void light()\", as well as their brackets. Otherwise the system will break. Harshly.
//__ADD_PROPERTY::name::TEXTURE
	Registers a uniform variable as a texture.
//__ADD_PROPERTY::name::COLOR
	Registers a uniform variable as a color.
//__ADD_PROPERTY::name::FLOAT
	Registers a uniform variable as a float.
	Damn, these three are so simple, isn't that surprising?
//__VERTEX_SPLIT__
	Tells the damn machine that the next function is gonna be a vertex one and that the code belongs there.
//__FRAGMENT_SPLIT__
	Tells the damn machine that the next function is gonna be a fragment one.
//__LIGHT_SPLIT__
	Tells the damn machine that the next function is gonna be a light one.
// __ADD_FLAG::name
	Adds a new flag for ubershader to process.
// __FLAG::name
	Tells the damn machine that the next lines of code can only be added to the resulting shader if flag is active.
// __FLAG_END
	Tells the damn machine that the flag processing is over so it can keep doing shit as always.
[/c]

If you are still feeling confused, I'm suggesting you to do two things:
	- Take a look at the existing effects, that trail of corpses can really teach you a lot.
	- For more information, please reread.

Have fun."
info_rus = "Так, значит... [gd]SpatialMaterial[/gd]. Звучит как план. Звучит как ВСЁ, что тебе когда-либо могло понадобиться от материала в 3D. Ага. Звучит здорово. Звучит правдоподобно. Но что происходит, когда ты используешь свой гигамозг, чтобы добавить дополнительный шейдерный эффект? О нет, всё разваливается! Тебе приходится использовать [gd]ShaderMaterial[/gd], чтобы сделать свои собственные эффекты! А что, если ты захочешь переиспользовать что-то, что было в [gd]SpatialMaterial[/gd]? Ну, чувак, просто скопипасть это или что-то в этом роде, нам всё равно. Я был немного зол, поэтому сделал ультимативную систему управления спагетти, угадай, что это? Правильно, это тот самый модуль. [p]Ubershader[/p] — такое умное слово, но на самом деле всё сводится к автоматизации копипастинга шейдерного кода. Тебе больше не нужно выполнять эту 5-минутную задачу, я потратил целую вечность, шлифуя эту автоматизированную хрень. Используй её. Пожалуйста. Я умоляю. На самом деле, это не имеет значения, все материалы в этом проекте ЯВЛЯЮТСЯ [gd]UserSpatialUbershader[/gd], так что ты испытаешь приличный прессинг со стороны этого проекта, чтобы использовать именно этот :)

В этом модуле есть два класса, о которых тебе действительно нужно знать: [gd]SpatialUbershader[/gd] и [gd]UserSpatialUbershader[/gd]. [gd]SpatialUbershader[/gd] — это основная логика этого модуля. Это ультимативный бомбический комбайнер спагетти, миксер, менеджер, чем бы он ни был. Однако, этот класс сам по себе не предоставляет user-friendly интерфейс, и из-за того, как работает Godot... Что ж, скажем так, я был вынужден сделать [gd]UserSpatialUbershader[/gd]. [r]Этот класс НЕ написан вручную.[/r] Он предоставляет export переменные и всю эту прикольную хрень, но писать его вручную было бы самоубийством. Именно поэтому существует [p]res://modules/spatial_ubershader/assets/code_generation_scene/code_generator.gd[/p], редакторский скрипт, который ты можешь запустить, чтобы обновить код в [gd]UserSpatialUbershader[/gd]. Другими словами, [gd]UserSpatialUbershader[/gd] - это просто более прикольный фасад для [gd]SpatialUbershader[/gd], ебучий мейкап, если хочешь. Прячет уродливое лицо. Мы все любим прикольную ложь, не так ли?

[wc]Использование материала, находясь в окопах[/wc]
//img:spatial_ubershader/use0.png
//img:spatial_ubershader/use1.png
Что тебе нужно понять об этом материале, так это то, что он может иметь несколько эффектов. Даже \"albedo\" текстура - тоже эффект. Ты просто включаешь нужные тебе эффекты, и когда закончишь: Жми [p]Force Update[/p], это обновит шейдерный код и параметры, которые ты можешь настраивать. Каждый эффект имеет свою собственную назначенную группу, которую ты можешь расширять и назначать нужные значения/текстуры. Проще некуда.

[wc]Как сделать свой собственный крутой эффект[/wc]
Слушай сюда, сынок, это очень сложная и пугающая задача... Она требует много терпения... На самом деле, кого я обманываю? Загляни в [p]res://modules/spatial_ubershader/assets/effects/[/p], пролистай эффекты, обрати внимание на паттерны, которые встречаются повсюду. Этот проект очень заточен под паттерны, знаешь ли? Давай взглянем на наш любимый эффект [p]albedo[/p].
[gd]
.
└── albedo
	├── config.tres
 	└── shader.tres
[/gd]
Все твои фанковые-шманковые шейдерные эффекты ДОЛЖНЫ иметь два файла: [p]config.tres[/p] и [p]shader.tres[/p]. [p]config.tres[/p] — это просто [gd]SpatialUbershaderEffectConfig[/gd] ЧЁРТ, ЭТО НАЗВАНИЕ КЛАССА УБИВАЕТ МЕНЯ ох, извини, я хотел сказать, что это конфиг для твоего эффекта, который в основном полезен для настройки его приоритета порядка, все эффекты обрабатываются в своего рода очереди. [p]shader.tres[/p] - это шейдерный код для твоего spatial шейдерного эффекта.

Шейдеры в данном случае - это не просто \"шейдеры\", у них есть некий мета-обработчик, о котором тебе нужно знать. Давай возьмём наш любимый альбедо-шейдер в качестве примера:
[c]
shader_type spatial; //__IGNORE_LINE__

// Входная текстура альбедо
//__ADD_PROPERTY::effect_tex::TEXTURE
uniform sampler2D effect_tex: hint_albedo;

// Множитель цветового оттенка
//__ADD_PROPERTY::effect_color::COLOR
uniform vec4 effect_color: hint_color;

// Блок корректировки UV
// __ADD_FLAG::effect_uv_tweak
// __FLAG::effect_uv_tweak
// Горизонтальный масштаб текстуры
//__ADD_PROPERTY::effect_UV_scale_x::FLOAT
uniform float effect_UV_scale_x = 1.0;
// Вертикальный масштаб текстуры
//__ADD_PROPERTY::effect_UV_scale_y::FLOAT
uniform float effect_UV_scale_y = 1.0;
// Горизонтальное смещение текстуры
//__ADD_PROPERTY::effect_UV_offset_x::FLOAT
uniform float effect_UV_offset_x = 0.0;
// Вертикальное смещение текстуры
//__ADD_PROPERTY::effect_UV_offset_y::FLOAT
uniform float effect_UV_offset_y = 0.0;
// __FLAG_END

//__FRAGMENT_SPLIT__
void fragment() { //__IGNORE_LINE__
	// Базовые UV-координаты
	vec2 effect_uv = UV;
	
	// Блок корректировки UV (включается conditionally)
	// __FLAG::effect_uv_tweak
	effect_uv.x *= effect_UV_scale_x;   // Применяем горизонтальный масштаб
	effect_uv.y *= effect_UV_scale_y;   // Применяем вертикальный масштаб
	effect_uv.x += effect_UV_offset_x;  // Применяем горизонтальное смещение
	effect_uv.y += effect_UV_offset_y;  // Применяем вертикальное смещение
	// __FLAG_END
	
	// Сэмплируем текстуру и применяем цветовой оттенок
	vec4 effect_tex_color = texture(effect_tex, effect_uv);
	ALBEDO = effect_tex_color.rgb * effect_color.rgb;
} //__IGNORE_LINE__
[/c]

Итак, ты мог заметить некоторые комментарии, которые не очень-то похожи на человеческие. Звучит так, будто машина взбунтовалась и собирается тебя убить. Что ж, это то, что я называю мета-обработкой, ага. Эти комментарии должны дать [gd]SpatialUbershader[/gd] понять, что, чёрт возьми, он должен делать с твоим чёртовым кодом. Если ты просто скормишь ему шейдер без всего этого - он примет ислам и откажется иметь с тобой дело, неверный. Скорее всего, это приведёт к сломанному сгенерированному шейдерному коду, который не будет делать ничего ценного. К счастью для тебя, я здесь, чтобы помочь, пока троллю твою задницу. Вот список твоих чёртовых комментариев, которые ты ДОЛЖЕН ЗНАТЬ И ПОМНИТЬ К КОНЦУ ПРОЧТЕНИЯ.
[c]
Вместо \"name\" может быть что угодно, убедись, что звёзды сошлись.

//__IGNORE_LINE__
	Игнорирует строку. То есть... Вау, неожиданно? Окей, тебе нужно поставить этого ублюдка в строках с \"shader_type\" и определениями \"void fragment()\", \"void vertex()\" и \"void light()\", а также их скобками. Иначе система сломается. Жёстко.
//__ADD_PROPERTY::name::TEXTURE
	Регистрирует uniform переменную как текстуру.
//__ADD_PROPERTY::name::COLOR
	Регистрирует uniform переменную как цвет.
//__ADD_PROPERTY::name::FLOAT
	Регистрирует uniform переменную как float.
	Чёрт, эти три так просты, разве не удивительно?
//__VERTEX_SPLIT__
	Говорит чёртовой машине, что следующая функция будет vertex, и что код принадлежит туда.
//__FRAGMENT_SPLIT__
	Говорит чёртовой машине, что следующая функция будет fragment.
//__LIGHT_SPLIT__
	Говорит чёртовой машине, что следующая функция будет light.
// __ADD_FLAG::name
	Добавляет новый флаг для обработки ubershader'ом.
// __FLAG::name
	Говорит чёртовой машине, что следующие строки кода могут быть добавлены в результирующий шейдер только если флаг активен.
// __FLAG_END
	Говорит чёртовой машине, что обработка флага закончена, так что она может продолжать делать своё дерьмо как обычно.
[/c]

Если ты всё ещё чувствуешь себя сбитым с толку, я предлагаю тебе сделать две вещи:
	- Взгляни на существующие эффекты, этот след трупов действительно может тебя многому научить.
	- Для получения дополнительной информации, пожалуйста, перечитай.

Веселись."
edit_time = 1.76123e+09
