[gd_resource type="Resource" load_steps=2 format=2]

[ext_resource path="res://modules/doc_info/src/doc_info.gd" type="Script" id=1]

[resource]
script = ExtResource( 1 )
info = "So welcome to the factory of MURDER muahaha. This module implements weapons that can be used by the player. That's gonna be a lot of damage.

[wc]Script Structure[/wc]
[ctr][gd]
.
├── weapon.gd
├── weapons
│   ├── firearm_bio_weapon.gd
│   ├── firearm_electro_weapon.gd
│   ├── firearm_flash_weapon.gd
│   ├── firearm_weapon.gd
│   ├── grenade_weapon.gd
│   ├── item.gd
│   ├── item_medical.gd
│   ├── melee_pickaxe_weapon.gd
│   └── melee_weapon.gd
└── weapon_system.gd
[/gd][/ctr]

[wc]Weapon System Main Script [p]./weapon_system.gd[/p][/wc]
This is the heart of this module. It takes all the data from [p]res://modules/player_weapon_system/assets/weapons/[/p] and turns it into factory of killings, oh yeah. This system contains a primary, secondary, melee, grenade weapons and a usable item. It does the following:
	- Being an inventory for weapons of course.
	- Dynamically loads data from [gd]PlayerWeapon[/gd]-extended files.
	- Switches weapons with animation transitions.
	- Keeps inventory persistent across checkpoints.
	- Handles [gd]PlayerWeapon[/gd], accepts inputs, calls appropriate functions.
		- Handles some grenade-specific logic with [gd]PlayerGrenadeWeapon[/gd] to support fast grenade throws.
	- Implements ammo pickup system.
	- Does some HUD integration.
	- Implements weapon pickup/drop system with [gd]LocationProp[/gd].
In other words it is some kind of sophisticated duct tape for all the weapons so they would be easier to manage and extend. That's what you need to know :)

[wc]Weapon Base Class [p]./weapon.gd[/p][/wc]
As it says, this is a base class for all the weapons in the game. It provides a set of basic functionality needed to make a weapon. Please be advised that weapons in this game are extending [gd]Resource[/gd] therefore the system isn't [p]scene-based[/p], but it is [p]resource-based[/p] instead. All weapons are resources that has to extend [gd]PlayerWeapon[/gd] and be stored in a unique folder at [p]res://modules/player_weapon_system/assets/weapons/[/p].
[c]Template[/c]
[gd]
# Your player weapon template code

extends PlayerWeapon
class_name PlayerYourWeaponNameHere

# Overridable method for weapon-specific initialization
func custom_load_initialize() -> void:
	pass

# Called when weapon is being hidden
func on_hide() -> void:
	pass

# Called when weapon is being equipped
func on_take() -> void:
	pass

# Called when shoot animation hits impact point
func on_shoot() -> void:
	pass

# Overridable initialization method
func custom_initialize() -> void:
	pass

# Base firing method to be overridden
func fire(origin: Vector3, forward: Vector3, is_first = false) -> void:
	pass

# Initiates reload sequence
func reload() -> void:
	pass

# Called when ammo is picked up
func on_ammo_pickup(multiplier = 1.0) -> void:
	pass

# Called when grenade launcher is activated
func on_grenade_launcher():
	pass

# Called when ammo mode is switched
func on_ammo_mode_switch():
	pass

# Called when weapon is being removed
func on_remove() -> void:
	pass

# Overridable update method
func custom_update(delta: float) -> void:
	pass

# Overridable physics process method
func custom_update_process(delta: float) -> void:
	pass

# Overridable location change handler
func on_location_change_custom():
	pass
[/gd]

[wc]Weapons [p]./weapons/[/p][/wc]
There are already some weapon classes created for this game, they are stored in this folder.
[gd]PlayerFirearmWeapon[/gd] - a basic firearm implementation that includes all kinds of stuff like recoil, spread, damage control, etc. If you want to make a gun, most likely this resource is your way to go.
[gd]PlayerFirearmElectroWeapon[/gd] - extension of firearms that create an electro-explosion on hitting anything.
[gd]PlayerFirearmFlashWeapon[/gd] - extension of firearms that create a flashbang on hitting anything.
[gd]PlayerFirearmBioWeapon[/gd] - extension of firearms that create a meaty explosion on hitting a character.
[gd]PlayerAnimatedItem[/gd] - a base class for animated items that you can use and then switch back to normal weapons.
[gd]PlayerAnimatedItemMedical[/gd] - a medical item that extends animated items to show use of medicals.
[gd]PlayerMeleeWeapon[/gd] - a basic melee implementation.
[gd]PlayerMeleePickaxeWeapon[/gd] - in Zone-3A I wanted to make some kind of Minecraft bullshit, but it is kinda unused now.

[wc]How to make a new weapon[/wc]
//img:player_weapon_system/creation0.png
0. Create a new folder at [p]res://modules/player_weapon_system/assets/weapons/[/p]
	- The folder's name is the weapon class name, remember that.
1. Create a [p]weapon.tres[/p] file, pick a desired weapon resource type.
2. Configure, tada, here's your weapon.
[r]If you want to make unique visuals, you need to make a new viewmodel, you can read about that in [p]viewmodel[/p] module page[/r]"
info_rus = "Итак, добро пожаловать на фабрику УБИЙСТВ муахаха. Этот модуль реализует оружие, которое может использоваться игроком. \"That's gonna be a lot of damage.\"

[wc]Структура скриптов[/wc]
[ctr][gd]
.
├── weapon.gd
├── weapons
│   ├── firearm_bio_weapon.gd
│   ├── firearm_electro_weapon.gd
│   ├── firearm_flash_weapon.gd
│   ├── firearm_weapon.gd
│   ├── grenade_weapon.gd
│   ├── item.gd
│   ├── item_medical.gd
│   ├── melee_pickaxe_weapon.gd
│   └── melee_weapon.gd
└── weapon_system.gd
[/gd][/ctr]

[wc]Главный скрипт системы оружия [p]./weapon_system.gd[/p][/wc]
Это сердце этого модуля. Он берёт все данные из [p]res://modules/player_weapon_system/assets/weapons/[/p] и превращает их в фабрику убийств, о да. Эта система содержит основное, дополнительное, ближнее оружие, гранаты и usable предметы. Она делает следующее:
	- Является инвентарём для оружия, конечно.
	- Динамически загружает данные из файлов, расширяющих [gd]PlayerWeapon[/gd].
	- Переключает оружие с анимированными переходами.
	- Сохраняет инвентарь постоянным между чекпойнтами.
	- Обрабатывает [gd]PlayerWeapon[/gd], принимает вводы, вызывает нужные функции.
		- Обрабатывает некоторую специфичную для гранат логику с [gd]PlayerGrenadeWeapon[/gd] для поддержки быстрых бросков гранат.
	- Реализует систему подбора патронов.
	- Делает некоторую интеграцию с HUD.
	- Реализует систему подбора/выбрасывания оружия с [gd]LocationProp[/gd].
Другими словами, это своего рода сложный скотч для всего оружия, чтобы им было легче управлять и расширять. Это то, что тебе нужно знать :)

[wc]Базовый класс оружия [p]./weapon.gd[/p][/wc]
Как и говорится, это базовый класс для всего оружия в игре. Он предоставляет набор базовойфункциональности, необходимой для создания оружия. Пожалуйста, имей в виду, что оружие в этой игре расширяет [gd]Resource[/gd], поэтому система не [p]scene-based[/p], а [p]resource-based[/p]. Все виды оружия - это ресурсы, которые должны расширять [gd]PlayerWeapon[/gd] и храниться в уникальной папке в [p]res://modules/player_weapon_system/assets/weapons/[/p].
[c]Шаблон[/c]
[gd]
# Твой код шаблона оружия игрока

extends PlayerWeapon
class_name PlayerYourWeaponNameHere

# Переопределяемый метод для специфичной инициализации оружия
func custom_load_initialize() -> void:
	pass

# Вызывается, когда оружие скрывается
func on_hide() -> void:
	pass

# Вызывается, когда оружие экипируется
func on_take() -> void:
	pass

# Вызывается, когда анимация выстрела достигает точки воздействия
func on_shoot() -> void:
	pass

# Переопределяемый метод инициализации
func custom_initialize() -> void:
	pass

# Базовый метод стрельбы для переопределения
func fire(origin: Vector3, forward: Vector3, is_first = false) -> void:
	pass

# Инициирует последовательность перезарядки
func reload() -> void:
	pass

# Вызывается при подборе патронов
func on_ammo_pickup(multiplier = 1.0) -> void:
	pass

# Вызывается при активации подствольного гранатомёта
func on_grenade_launcher():
	pass

# Вызывается при переключении режима патронов
func on_ammo_mode_switch():
	pass

# Вызывается при удалении оружия
func on_remove() -> void:
	pass

# Переопределяемый метод обновления
func custom_update(delta: float) -> void:
	pass

# Переопределяемый метод физического процесса
func custom_update_process(delta: float) -> void:
	pass

# Переопределяемый обработчик смены локации
func on_location_change_custom():
	pass
[/gd]

[wc]Оружие [p]./weapons/[/p][/wc]
Для этой игры уже созданы некоторые классы оружия, они хранятся в этой папке.
[gd]PlayerFirearmWeapon[/gd] - базовая реализация огнестрельного оружия, которая включает все типы штук, такие как отдача, разброс, контроль урона и т.д. Если ты хочешь сделать пушку, вероятнее всего этот ресурс - твой путь.
[gd]PlayerFirearmElectroWeapon[/gd] - расширение огнестрельного оружия, которое создаёт электро-взрыв при попадании во что-либо.
[gd]PlayerFirearmFlashWeapon[/gd] - расширение огнестрельного оружия, которое создаёт флешбэнг при попадании во что-либо.
[gd]PlayerFirearmBioWeapon[/gd] - расширение огнестрельного оружия, которое создаёт мясной взрыв при попадании в персонажа.
[gd]PlayerAnimatedItem[/gd] - базовый класс для анимированных предметов, которые ты можешь использовать, а затем переключиться обратно на обычное оружие.
[gd]PlayerAnimatedItemMedical[/gd] - медицинский предмет, который расширяет анимированные предметы для показа использования медицинских средств.
[gd]PlayerMeleeWeapon[/gd] - базовая реализация ближнего оружия.
[gd]PlayerMeleePickaxeWeapon[/gd] - в Zone-3A я хотел сделать какую-то Minecraft хрень, но сейчас это не используется.

[wc]Как сделать новое оружие[/wc]
//img:player_weapon_system/creation0.png
0. Создай новую папку в [p]res://modules/player_weapon_system/assets/weapons/[/p]
	- Имя папки - это имя класса оружия, помни это.
1. Создай файл [p]weapon.tres[/p], выбери нужный тип ресурса оружия.
2. Настрой, та-да, вот твоё оружие.
[r]Если ты хочешь сделать уникальную визуализацию, тебе нужно сделать новую вьюмодель, ты можешь прочитать об этом на странице модуля [p]viewmodel[/p][/r]"
edit_time = 1.76123e+09
