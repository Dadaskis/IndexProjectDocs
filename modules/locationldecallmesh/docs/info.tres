[gd_resource type="Resource" load_steps=2 format=2]

[ext_resource path="res://modules/doc_info/src/doc_info.gd" type="Script" id=1]

[resource]
script = ExtResource( 1 )
info = "[gd]LocationDecalMesh[/gd] represents an optimized decal that can be used in huge quantities on any kinds of locations. It is using mesh instance for these (meaning accurate lighting, lower GPU overhead, etc) and combines it all together when the game starts. However, this kind of decals isn't fast to project as it is computationally expensive. It can be done fast enough, but it might not be usable for cases when you need to create a character's blood all around the place after one is getting shot (consider to use [gd]LocationDecal[/gd] instead). Real-time creation of these isn't recommended. Their main purpose is about placing them down on locations to add additional detail using flat planes with half-transparent textures that serve as decals. In other words: Primary use of this node is creation of completely static decals.

//img:location_decal_mesh/example0.png

[wc]Principle of work[/wc]
The node itself, [gd]LocationDecalMesh[/gd] is relatively simple, it is managing some simple settings and all. It doesn't contain the projection logic, however. Projection logic is stored at [p]res://modules/location_decal_mesh/third_party/ProjectedDecal.tscn[/p] and its related script.

<a href=\"https://github.com/Miziziziz/GodotProjectedDecals\">Decal projection code was politely stolen from here.</a>

I'm a gentlemen after all.

I honestly wish I could explain how exactly does it do the projection, but really... It just contains a clusterfuck of maths that I don't really understand. So, all I do, is instancing the scene to do the projection trick, get the mesh and call it a day. You should too. Lose the control. Get some questionable freedom. Please."
info_rus = "[gd]LocationDecalMesh[/gd] представляет собой оптимизированный декаль, который можно использовать в огромных количествах на любых локациях. Он использует mesh instance для этого (что означает точное освещение, меньшую нагрузку на GPU и т.д.) и объединяет всё вместе при запуске игры. Однако такой тип декалей не быстр в проецировании, так как это вычислительно затратно. Это можно сделать достаточно быстро, но это может быть непригодно для случаев, когда нужно создать кровь персонажа повсюду после выстрела (рассмотри возможность использования [gd]LocationDecal[/gd] вместо этого). Создание этих декалей в реальном времени не рекомендуется. Их основное предназначение - размещение их на локациях для добавления дополнительных деталей с помощью плоских плоскостей с полупрозрачными текстурами, которые служат декалями. Другими словами: основное использование этого узла - создание полностью статических декалей.

//img:location_decal_mesh/example0.png

[wc]Принцип работы[/wc]
Сам узел [gd]LocationDecalMesh[/gd] относительно прост, он управляет некоторыми простыми настройками и всем таким. Однако он не содержит логики проецирования. Логика проецирования хранится в [p]res://modules/location_decal_mesh/third_party/ProjectedDecal.tscn[/p] и связанном с ним скрипте.

<a href=\"https://github.com/Miziziziz/GodotProjectedDecals\">Код проецирования декалей был вежливо украден отсюда.</a>

Я всё-таки джентльмен.

Честно говоря, я бы хотел объяснить, как именно он делает проецирование, но на самом деле... Он просто содержит ебаную кучу математики, которую я не понимаю. Так что всё, что я делаю, это инстанциирую сцену, чтобы сделать трюк с проецированием, получаю меш и на этом всё. Тебе следует поступать так же. Потеряй контроль. Обрети некоторую сомнительную свободу. Пожалуйста."
edit_time = 1.76123e+09
