[gd_resource type="Resource" load_steps=2 format=2]

[ext_resource path="res://modules/doc_info/src/doc_info.gd" type="Script" id=1]

[resource]
script = ExtResource( 1 )
info = "A special type of \"grenade\" that explodes on impact. 
//img:firearm_grenade/example0.jpg

[c]Usage example[/c]
[gd]
# Create and configure grenade projectile
var grenade = FirearmGrenade.new()
LocationBaseScene.add_scene_child(grenade)

# Set grenade properties
grenade.explosion_damage = 100.0
grenade.explosion_damage_type = Damagable.DamageType.EXPLOSION
grenade.explosion_force = 10.0
grenade.explosion_particles = \"generic\"
grenade.explosion_radius = 10.0
grenade.explosion_ragdoll_force_mult = 1.0
grenade.explosion_scale = 1.0
grenade.character_owner = character

# Calculate launch position/direction
var pos = global_position
var forward = Vector3(0.0, 0.0, 1.0)

# Launch grenade
grenade.launch(pos, forward)
[/gd]

[t]Technical Side[/t]

[gd]
├── firearm_grenade_areas.gd
	[gd]FirearmGrenadeAreas[/gd] - Autoload
	# Pool of Area nodes that are used for detection of damaged bodies

└── firearm_grenade.gd
	[gd]FirearmGrenade[/gd] - Node
	# The grenade itself, it is highly advised to use this class only
[/gd]

There's nothing too special about technical implementation of this node, as the code is pretty self-explanatory. However it is worth mentioning the following moments:
	- You can change visuals of [gd]FirearmGrenade[/gd] in [p]res://modules/firearm_grenade/assets/visual_prefab/visual_mesh.tscn[/p]
	- [gd]FirearmGrenade[/gd] is NOT creating [gd]Area[/gd] nodes, instead it is calling [gd]FirearmGrenadeAreas.get_area()[/gd] to get one. It's an optimization technique that is required to be used due to the fact [gd]Area[/gd] nodes have a pretty slow physics initialization for some reason"
info_rus = "Специальный тип \"гранаты\", которая взрывается при ударе.
//img:firearm_grenade/example0.jpg

[c]Пример использования[/c]
[gd]
# Создаём и настраиваем снаряд-гранату
var grenade = FirearmGrenade.new()
LocationBaseScene.add_scene_child(grenade)

# Устанавливаем свойства гранаты
grenade.explosion_damage = 100.0
grenade.explosion_damage_type = Damagable.DamageType.EXPLOSION
grenade.explosion_force = 10.0
grenade.explosion_particles = \"generic\"
grenade.explosion_radius = 10.0
grenade.explosion_ragdoll_force_mult = 1.0
grenade.explosion_scale = 1.0
grenade.character_owner = character

# Вычисляем позицию/направление запуска
var pos = global_position
var forward = Vector3(0.0, 0.0, 1.0)

# Запускаем гранату
grenade.launch(pos, forward)
[/gd]

[t]Техническая сторона[/t]

[gd]
├── firearm_grenade_areas.gd
	[gd]FirearmGrenadeAreas[/gd] - Автозагрузка
	# Пул узлов Area, используемых для обнаружения повреждённых тел

└── firearm_grenade.gd
	[gd]FirearmGrenade[/gd] - Узел
	# Собственно граната, крайне рекомендуется использовать только этот класс
[/gd]

В технической реализации этого узла нет ничего особенного, так как код довольно самодостаточен. Однако стоит упомянуть следующие моменты:
	- Визуал [gd]FirearmGrenade[/gd] можно изменить в [p]res://modules/firearm_grenade/assets/visual_prefab/visual_mesh.tscn[/p]
	- [gd]FirearmGrenade[/gd] НЕ создаёт узлы [gd]Area[/gd], вместо этого он вызывает [gd]FirearmGrenadeAreas.get_area()[/gd] для их получения. Это оптимизационная техника, необходимая из-за того, что узлы [gd]Area[/gd] по какой-то причине имеют довольно медленную инициализацию физики"
edit_time = 1.76113e+09
