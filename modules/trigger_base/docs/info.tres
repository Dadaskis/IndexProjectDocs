[gd_resource type="Resource" load_steps=2 format=2]

[ext_resource path="res://modules/doc_info/src/doc_info.gd" type="Script" id=1]

[resource]
script = ExtResource( 1 )
info = "//img:trigger_base/example0.png

It's some kind of cool base for triggers, you know, hence why it is called \"trigger_base\". Cubes. You just... tweak them. They cover the space. They give you possibility to set up triggers. Control. Easier to code. Fancier looks. Sense of agency. It was one of the first things made in this project. It looked cool as shit. It turned out to be barely usable though. But damn, how cool it was.

[gd]TriggerBase[/gd] is like a decent base class for in-editor triggers that simplify visual initialization and just provides basic methods to check entering/exiting bodies. That's... really it.

[c]Usage example[/c]
[gd]
tool
class_name KickassTrigger

extends TriggerBase

# Your personal body count :)
var bodies = []

# Ensures the trigger has the correct material assigned
func verify_material():
	if trigger_material == null:
		trigger_material = \\
			load(\"res://modules/damagable/materials/damage_trigger_material.tres\")

# Called when a body enters the trigger area
func trigger_on_body_enter(body):
	if body is StaticBody:
		return  # Ignore static bodies
		
	if body is KinematicBody:
		# Kinematic bodies (typically characters) are added to tracking list
		bodies.append(body)
	if body is RigidBody:
		# Rigid bodies are also added (could be physics objects)
		bodies.append(body)

# Called when a body exits the trigger area
func trigger_on_body_exit(body):
	if body is StaticBody:
		return  # Ignore static bodies
	bodies.erase(body)  # Remove from tracking list
[/gd]

Look, I know you're not reading this. Nobody reads docs. But if you are reading this, congratulations - you're now legally obligated to use this class properly. Not sure why would you need it, but you can be proud about it."
info_rus = "//img:trigger_base/example0.png

Это типа крутая база для триггеров, понимаешь, поэтому она и называется \"trigger_base\". Кубы. Ты просто... настраиваешь их. Они покрывают пространство. Они дают тебе возможность настраивать триггеры. Контроль. Легче программировать. Выглядит круче. Это была одна из первых вещей, сделанных в этом проекте. Выглядело чертовски круто. Оказалось, однако, едва полезным. Но чёрт, как же это было круто.

[gd]TriggerBase[/gd] — это типа приличный базовый класс для внутри-редакторных триггеров, который упрощает визуальную инициализацию и просто предоставляет базовые методы для проверки входа/выхода тел. Это... действительно всё.

[c]Пример использования[/c]
[gd]
tool
class_name KickassTrigger

extends TriggerBase

# Твой личный счётчик тел :)
var bodies = []

# Гарантирует, что триггеру назначен правильный материал
func verify_material():
	if trigger_material == null:
		trigger_material = \\
			load(\"res://modules/damagable/materials/damage_trigger_material.tres\")

# Вызывается, когда тело входит в область триггера
func trigger_on_body_enter(body):
	if body is StaticBody:
		return  # Игнорируем статические тела
		
	if body is KinematicBody:
		# Кинематические тела (обычно персонажи) добавляются в список отслеживания
		bodies.append(body)
	if body is RigidBody:
		# Твёрдые тела тоже добавляются (могут быть физическими объектами)
		bodies.append(body)

# Вызывается, когда тело покидает область триггера
func trigger_on_body_exit(body):
	if body is StaticBody:
		return  # Игнорируем статические тела
	bodies.erase(body)  # Удаляем из списка отслеживания
[/gd]

Слушай, я знаю, ты это не читаешь. Никто не читает документацию. Но если ты это читаешь, поздравляю - теперь ты по закону обязан использовать этот класс правильно. Не уверен, зачем он тебе, но ты можешь гордиться этим."
edit_time = 1.76123e+09
