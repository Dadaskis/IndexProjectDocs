[gd_resource type="Resource" load_steps=2 format=2]

[ext_resource path="res://modules/doc_info/src/doc_info.gd" type="Script" id=1]

[resource]
script = ExtResource( 1 )
info = "//img:usable_showup/example0.png

You see that text over there? The one that could easily insult a good chunk of the US population, you know? So yeah, this is what I call \"Usable Showup\". It helps the player to identify - what that usable object does. It was made because:
A: People were confused about certain control panels that I love to use nonetheless...
B: I'm the laziest fuck to exist, of course I'm going to abuse shit like this, instead of level designing it in a \"right\" way.
One module solves a huge problem to exist. It's amazing. Makes life easier. Like a breathe of fresh air. A breathe of air full of text, but still.

[c]Usage example[/c]
[gd]
# Our glorified parent node
var parent

# Sets the main prompt text (line 0)
func set_text0_text(text: String):
	if not is_instance_valid(usable_showup):
		return
	usable_showup.set_text0_text(text)

# Gets the main prompt text (line 0)
func get_text0_text() -> String:
	if not is_instance_valid(usable_showup):
		return \"\"
	return usable_showup.get_text0_text()

# Sets the color for the main prompt text
func set_text0_color(color: Color):
	if not is_instance_valid(usable_showup):
		return Color.black
	usable_showup.set_text0_color(color)

# Gets the color of the main prompt text
func get_text0_color() -> Color:
	if not is_instance_valid(usable_showup):
		return Color.black
	return usable_showup.get_text0_color()

# Sets the secondary prompt text (line 1)
func set_text1_text(text: String):
	if not is_instance_valid(usable_showup):
		return
	usable_showup.set_text1_text(text)

# Gets the secondary prompt text (line 1)
func get_text1_text() -> String:
	if not is_instance_valid(usable_showup):
		return \"\"
	return usable_showup.get_text1_text()

# Sets the color for the secondary prompt text
func set_text1_color(color: Color):
	if not is_instance_valid(usable_showup):
		return
	usable_showup.set_text1_color(color)

# Gets the color of the secondary prompt text
func get_text1_color() -> Color:
	if not is_instance_valid(usable_showup):
		return Color.black
	return usable_showup.get_text1_color()

# Shows or hides the interaction prompt UI
func set_showup_visible(value: bool):
	if not is_instance_valid(usable_showup):
		return
	usable_showup.set_showup_visible(value)

# Checks if the interaction prompt is currently visible
func get_showup_visible() -> bool:
	if not is_instance_valid(usable_showup):
		return false
	return usable_showup.get_showup_visible()

# Creates and attaches the interaction prompt UI
# showup_scale: Scaling factor for the prompt UI (default 1.0)
func create_showup(showup_scale: = 1.0):
	# If showup already exists, just update its scale and visibility
	if usable_showup:
		usable_showup.scale = Vector3.ONE * showup_scale
		set_showup_visible(true)
		return
	
	# Create new showup instance and configure it
	usable_showup = UsableShowup.create_showup()
	usable_showup.scale = Vector3.ONE * showup_scale
	parent.add_child(usable_showup)
[/gd]

And all that functionality is a part of [gd]Usable[/gd] class that is already used by all buttons of any sorts, it is highly advised just to use [gd]Usable[/gd] instead. I mean dude. I wrote it already. You don't have to copypaste that shit I wrote already. It's amazing to exploit my labor. So? Just do it. It's funny. Doesn't take too much time. And...

Good luck."
info_rus = "//img:usable_showup/example0.png

Видишь тот текст там? Тот, который мог бы легко оскорбить добрую часть населения США, понимаешь? Так вот, это то, что я называю \"Usable Showup\" (Подсказка взаимодействия). Это помогает игроку определить - что делает этот используемый объект. Это было сделано потому что:
А: Люди путались в некоторых панелях управления, которые я всё равно люблю использовать...
Б: Я самый ленивый уёбок на свете, конечно, я буду злоупотреблять такой хренью вместо того, чтобы правильно это level design'ить.
Один модуль решает огромную проблему существования. Это потрясающе. Облегчает жизнь. Как глоток свежего воздуха. Глоток воздуха, полного текста, но всё же.

[c]Пример использования[/c]
[gd]
# Наш прославленный родительская нода
var parent

# Устанавливает основной текст подсказки (линия 0)
func set_text0_text(text: String):
	if not is_instance_valid(usable_showup):
		return
	usable_showup.set_text0_text(text)

# Получает основной текст подсказки (линия 0)
func get_text0_text() -> String:
	if not is_instance_valid(usable_showup):
		return \"\"
	return usable_showup.get_text0_text()

# Устанавливает цвет для основного текста подсказки
func set_text0_color(color: Color):
	if not is_instance_valid(usable_showup):
		return Color.black
	usable_showup.set_text0_color(color)

# Получает цвет основного текста подсказки
func get_text0_color() -> Color:
	if not is_instance_valid(usable_showup):
		return Color.black
	return usable_showup.get_text0_color()

# Устанавливает вторичный текст подсказки (линия 1)
func set_text1_text(text: String):
	if not is_instance_valid(usable_showup):
		return
	usable_showup.set_text1_text(text)

# Получает вторичный текст подсказки (линия 1)
func get_text1_text() -> String:
	if not is_instance_valid(usable_showup):
		return \"\"
	return usable_showup.get_text1_text()

# Устанавливает цвет для вторичного текста подсказки
func set_text1_color(color: Color):
	if not is_instance_valid(usable_showup):
		return
	usable_showup.set_text1_color(color)

# Получает цвет вторичного текста подсказки
func get_text1_color() -> Color:
	if not is_instance_valid(usable_showup):
		return Color.black
	return usable_showup.get_text1_color()

# Показывает или скрывает UI подсказки взаимодействия
func set_showup_visible(value: bool):
	if not is_instance_valid(usable_showup):
		return
	usable_showup.set_showup_visible(value)

# Проверяет, видна ли в данный момент подсказка взаимодействия
func get_showup_visible() -> bool:
	if not is_instance_valid(usable_showup):
		return false
	return usable_showup.get_showup_visible()

# Создаёт и прикрепляет UI подсказки взаимодействия
# showup_scale: Коэффициент масштабирования для UI подсказки (по умолчанию 1.0)
func create_showup(showup_scale: = 1.0):
	# Если подсказка уже существует, просто обновляем её масштаб и видимость
	if usable_showup:
		usable_showup.scale = Vector3.ONE * showup_scale
		set_showup_visible(true)
		return
	
	# Создаём новый экземпляр подсказки и настраиваем его
	usable_showup = UsableShowup.create_showup()
	usable_showup.scale = Vector3.ONE * showup_scale
	parent.add_child(usable_showup)
[/gd]

И вся эта функциональность является частью класса [gd]Usable[/gd], который уже используется всеми кнопками любого рода, настоятельно рекомендуется просто использовать [gd]Usable[/gd]. В смысле, чувак. Я уже это написал. Тебе не нужно копипастить то дерьмо, что я уже написал. Это потрясающе - эксплуатировать мой труд. Так? Просто сделай это. Это забавно. Не занимает много времени. И...

Удачи."
edit_time = 1.76123e+09
